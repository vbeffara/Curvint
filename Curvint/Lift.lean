import Mathlib

open Set Topology Metric unitInterval Filter ContinuousMap

namespace ContinuousMap

variable
  {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] {a b c : Œ±}
  {E : Type*} [TopologicalSpace E]

def firstval (hab : a ‚â§ b) (f : C(Icc a b, E)) : E := f ‚ü®a, left_mem_Icc.2 hab‚ü©

def lastval (hab : a ‚â§ b) (f : C(Icc a b, E)) : E := f ‚ü®b, right_mem_Icc.2 hab‚ü©

noncomputable def concat (h : b ‚àà Icc a c) (f : C(Icc a b, E)) (g : C(Icc b c, E)) :
    C(Icc a c, E) := by
  by_cases hb : f.lastval h.1 = g.firstval h.2
  ¬∑ let h (t : Œ±) : E := if t ‚â§ b then IccExtend h.1 f t else IccExtend h.2 g t
    suffices Continuous h from ‚ü®fun t => h t, by fun_prop‚ü©
    apply Continuous.if_le (by fun_prop) (by fun_prop) continuous_id continuous_const
    rintro x rfl ; simpa
  ¬∑ exact .const _ (firstval h.1 f) -- junk value

variable {f : C(Icc a b, E)} {g : C(Icc b c, E)}

@[simp] theorem concat_left (h : b ‚àà Icc a c) (hb : f.lastval h.1 = g.firstval h.2)
    {t : Icc a c} (ht : t ‚â§ b) : concat h f g t = f ‚ü®t, t.2.1, ht‚ü© := by
  simp [concat, hb, ht, IccExtend_apply, t.2.1]

@[simp] theorem concat_right (h : b ‚àà Icc a c) (hb : f.lastval h.1 = g.firstval h.2)
    {t : Icc a c} (ht : b ‚â§ t) : concat h f g t = g ‚ü®t, ht, t.2.2‚ü© := by
  simp [concat, hb, ht, IccExtend_apply, t.2.2, h.1]
  intro ht' ; have : b = t := le_antisymm ht ht' ; simpa [‚Üê this]

variable {Y : Type*} [TopologicalSpace Y] [LocallyCompactSpace Y] [CompactIccSpace Œ±]
    {F : C(Y, C(Icc a b, E))} {G : C(Y, C(Icc b c, E))}

theorem concat_continuous (h : b ‚àà Icc a c) (hfg : ‚àÄ y, lastval h.1 (F y) = firstval h.2 (G y)) :
    Continuous (fun y => concat h (F y) (G y)) := by
  let FF := F.uncurry |>.comp ContinuousMap.prodSwap |>.curry
  let GG := G.uncurry |>.comp ContinuousMap.prodSwap |>.curry
  let FG := concat h FF GG |>.uncurry |>.comp ContinuousMap.prodSwap |>.curry |>.2
  convert FG ; rename_i y ; ext t
  by_cases htb : t ‚â§ b
  ¬∑ simp [concat_left, hfg, htb]
    rw [concat_left h (by { ext y ; exact hfg y }) htb] ; rfl
  ¬∑ have : b ‚â§ t := le_of_not_le htb
    simp [concat_right, hfg, this]
    rw [concat_right h (by { ext y ; exact hfg y }) this] ; rfl

theorem concat_continuousOn (h : b ‚àà Icc a c) {ys : Set Y} (hys : IsClosed ys)
    (hfg : ‚àÄ y ‚àà ys, lastval h.1 (F y) = firstval h.2 (G y)) :
    ContinuousOn (fun y => concat h (F y) (G y)) ys := by
  rw [continuousOn_iff_continuous_restrict]
  change Continuous (fun y : ys ‚Ü¶ concat h (F y) (G y))
  haveI : LocallyCompactSpace ys := hys.locallyCompactSpace
  apply @concat_continuous Œ± _ _ _ a b c E _ ys _ _ _ (F.restrict ys) (G.restrict ys) h
  intro y ; exact hfg y y.2

variable {Œπ : Type} {p : Filter Œπ} {F : Œπ ‚Üí C(Icc a b, E)} {G : Œπ ‚Üí C(Icc b c, E)}

theorem cts (h : b ‚àà Icc a c) (hfg : ‚àÄ·∂† i in p, (F i).lastval h.1 = (G i).firstval h.2)
    (hfg' : f.lastval h.1 = g.firstval h.2)
    (hf : Tendsto F p (ùìù f)) (hg : Tendsto G p (ùìù g)) :
    Tendsto (fun i => concat h (F i) (G i)) p (ùìù (concat h f g)) := by
  rw [tendsto_nhds_compactOpen] at hf hg ‚ä¢
  rintro K hK U hU hfgU
  let œÄ‚ÇÅ : C(Icc a b, Icc a c) := ‚ü®fun x => ‚ü®x.1, x.2.1, x.2.2.trans h.2‚ü©, by fun_prop‚ü©
  let œÄ‚ÇÇ : C(Icc b c, Icc a c) := ‚ü®fun x => ‚ü®x.1, h.1.trans x.2.1, x.2.2‚ü©, by fun_prop‚ü©
  let K‚ÇÅ : Set (Icc a b) := œÄ‚ÇÅ ‚Åª¬π' K
  let K‚ÇÇ : Set (Icc b c) := œÄ‚ÇÇ ‚Åª¬π' K
  have hK‚ÇÅ : IsCompact K‚ÇÅ := hK.preimage_continuous œÄ‚ÇÅ.2
  have hK‚ÇÇ : IsCompact K‚ÇÇ := hK.preimage_continuous œÄ‚ÇÇ.2
  have hfU : MapsTo f K‚ÇÅ U := by intro x hx ; simpa [concat, hfg', œÄ‚ÇÅ, x.2.2] using hfgU hx
  have hgU : MapsTo g K‚ÇÇ U := by
    intro x hx
    by_cases hxb : b = x
    ¬∑ simp [lastval, firstval, hxb] at hfg' ; rw [‚Üê hfg']
      exact hfU hx
    ¬∑ have : ¬¨ (x ‚â§ b) := by simpa using lt_of_le_of_ne x.2.1 hxb
      simpa [concat, hfg', œÄ‚ÇÇ, this] using hfgU hx
  specialize hf K‚ÇÅ hK‚ÇÅ U hU hfU
  specialize hg K‚ÇÇ hK‚ÇÇ U hU hgU
  filter_upwards [hf, hg, hfg] with i hf hg hfg x hx
  by_cases hx' : x ‚â§ b
  ¬∑ simp [concat, hfg, hx', Set.IccExtend, projIcc, x.2.1]
    apply hf ; simp [K‚ÇÅ, œÄ‚ÇÅ, hx]
  ¬∑ simp [concat, hfg, hx', le_of_not_le hx', Set.IccExtend, projIcc, x.2.2]
    apply hg ; simp [K‚ÇÇ, œÄ‚ÇÇ, hx]

end ContinuousMap

variable
  {E X Z: Type*} [TopologicalSpace E] [TopologicalSpace X] [TopologicalSpace Z]
  {p : E ‚Üí X} {Œ≥ : C(I, X)} {x x‚ÇÄ : X} {e‚ÇÄ : E}

namespace Trivialization

def lift (T : Trivialization Z p) (e : E) (x : X) : E := T.invFun (x, (T e).2)

@[simp] theorem lift_self (T : Trivialization Z p) (e : E) (hx : p e ‚àà T.baseSet) :
    T.lift e (p e) = e := by
  simp [lift] ; rw [symm_apply_mk_proj] ; rwa [mem_source]

@[simp] theorem lift_proj (T : Trivialization Z p) (e : E) (x : X) (hx : x ‚àà T.baseSet) :
    p (T.lift e x) = x := by
  simp [lift] ; apply proj_symm_apply ; rwa [mem_target]

end Trivialization

namespace IsCoveringMap

theorem eq_of_comp_eq' (hp : IsCoveringMap p) {A : Type*} [TopologicalSpace A] [PreconnectedSpace A]
    {g‚ÇÅ g‚ÇÇ : C(A, E)} (he : p ‚àò g‚ÇÅ = p ‚àò g‚ÇÇ) {a : A} (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ :=
  ContinuousMap.ext (congrFun <| hp.eq_of_comp_eq g‚ÇÅ.continuous_toFun g‚ÇÇ.continuous_toFun he a ha)

theorem lift_unique (hp : IsCoveringMap p) {Œì‚ÇÅ Œì‚ÇÇ : C(I, E)} (h0 : Œì‚ÇÅ 0 = Œì‚ÇÇ 0)
    (h : p ‚àò Œì‚ÇÅ = p ‚àò Œì‚ÇÇ) : Œì‚ÇÅ = Œì‚ÇÇ := by
  exact hp.eq_of_comp_eq' h h0

end IsCoveringMap

structure Setup (p : E ‚Üí X) where
  t : ‚Ñï ‚Üí I
  n : ‚Ñï
  --
  ht : Monotone t
  ht0 : t 0 = 0
  ht1 : ‚àÄ m ‚â• n, t m = 1
  --
  c : ‚Ñï ‚Üí X
  T (n : ‚Ñï) : Trivialization (p ‚Åª¬π' {c n}) p

namespace Setup

variable {S : Setup p} {n : ‚Ñï}

@[simp] theorem left_mem : S.t n ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

@[simp] theorem right_mem : S.t (n + 1) ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

def chain (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : ‚Ñï ‚Üí E
  | 0 => e‚ÇÄ
  | n + 1 => (S.T n).lift (S.chain Œ≥ e‚ÇÄ n) (Œ≥ (S.t (n + 1)))

def fits (S : Setup p) (Œ≥ : C(I, X)) : Prop :=
  ‚àÄ n, Set.Icc (S.t n) (S.t (n + 1)) ‚äÜ Œ≥ ‚Åª¬π' (S.T n).baseSet

noncomputable def exist (hp : IsCoveringMap p) (Œ≥ : C(I, X)) : { S : Setup p // S.fits Œ≥ } := by
  let T (t : I) : Trivialization (p ‚Åª¬π' {Œ≥ t}) p := Classical.choose (hp (Œ≥ t)).2
  let mem_T (t : I) : Œ≥ t ‚àà (T t).baseSet := Classical.choose_spec (hp (Œ≥ t)).2
  let V (t : I) : Set I := Œ≥ ‚Åª¬π' (T t).baseSet
  have h1 t : IsOpen (V t) := (T t).open_baseSet.preimage Œ≥.continuous
  have h2 : univ ‚äÜ ‚ãÉ t, V t := by intro t _ ; rw [mem_iUnion] ; use t ; apply mem_T
  have := exists_monotone_Icc_subset_open_cover_unitInterval h1 h2
  choose t ht0 ht ht1 c hc using this
  choose n ht1 using ht1
  exact ‚ü®‚ü®t, n, ht, ht0, ht1, fun n => Œ≥ (c n), fun n => T (c n)‚ü©, hc‚ü©

noncomputable def partial_map (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) (n : ‚Ñï) :
    C(Icc (S.t n) (S.t (n + 1)), E) := by
  by_cases hS : S.fits Œ≥
  ¬∑ let f (t : (Icc (S.t n) (S.t (n + 1)))) : E := (S.T n).lift (S.chain Œ≥ e‚ÇÄ n) (Œ≥ ‚Üët)
    have : Continuous f := by
      apply (S.T n).continuousOn_invFun.comp_continuous (by fun_prop)
      intro t ; rw [Trivialization.mem_target] ; exact hS n t.2
    exact ‚ü®f, this‚ü©
  ¬∑ exact .const _ (S.chain Œ≥ e‚ÇÄ n)

noncomputable def pmap (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : ‚àÄ n, C(Icc (S.t 0) (S.t n), E)
  | 0 => .const _ e‚ÇÄ
  | n + 1 => concat ‚ü®S.ht (by omega), S.ht (by omega)‚ü© (pmap S Œ≥ e‚ÇÄ n) (S.partial_map Œ≥ e‚ÇÄ n)

noncomputable def map (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : C(I, E) := by
  have h1 (t : I) : t ‚àà Icc (S.t 0) (S.t S.n) := by
    rcases t with ‚ü®t, ht0, ht1‚ü©
    simp [S.ht0, S.ht1]
    simpa using ht1
  have := S.pmap Œ≥ e‚ÇÄ S.n
  let f (t : I) := S.pmap Œ≥ e‚ÇÄ S.n ‚ü®t, h1 t‚ü©
  have h2 : Continuous f := by fun_prop
  exact ‚ü®f, h2‚ü©

namespace fits

theorem chain_proj (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï) :
    p (S.chain Œ≥ e‚ÇÄ n) = Œ≥ (S.t n) := by
  cases n with
  | zero => simp [chain, he‚ÇÄ, S.ht0]
  | succ n =>
    apply Trivialization.lift_proj ; apply hS n ; apply S.right_mem

@[simp] theorem partial_map_left (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï) :
    firstval (S.ht (by omega)) (partial_map S Œ≥ e‚ÇÄ n) = S.chain Œ≥ e‚ÇÄ n := by
  have h1 := hS.chain_proj he‚ÇÄ n
  simp [firstval, partial_map, ‚Üê h1, hS]
  apply (S.T _).lift_self ; simp [h1] ; apply hS n ; apply S.left_mem

@[simp] theorem partial_map_right (hS : S.fits Œ≥) (e‚ÇÄ : E) (n : ‚Ñï) :
    partial_map S Œ≥ e‚ÇÄ n ‚ü®_, right_mem‚ü© = S.chain Œ≥ e‚ÇÄ (n + 1) := by
  simp [partial_map, hS] ; rfl

@[simp] theorem pmap_last (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) :
    lastval (S.ht (by omega)) (pmap S Œ≥ e‚ÇÄ n) = S.chain Œ≥ e‚ÇÄ n := by
  induction n with
  | zero => rfl
  | succ n ih =>
    rw [lastval, pmap, concat_right]
    ¬∑ rw [partial_map_right] ; exact hS
    ¬∑ rw [ih, partial_map_left]
      ¬∑ exact hS
      ¬∑ exact he‚ÇÄ
    ¬∑ apply S.ht ; omega

@[simp] theorem pmap_first (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) :
    firstval (S.ht (by omega)) (pmap S Œ≥ e‚ÇÄ n) = e‚ÇÄ := by
  induction n with
  | zero => rfl
  | succ n ih =>
    rwa [firstval, pmap, concat_left]
    ¬∑ simp [*]
    ¬∑ apply S.ht ; omega

@[simp] theorem pmap_apply (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï)
    (t : Icc (S.t 0) (S.t n)) : p (pmap S Œ≥ e‚ÇÄ n t) = Œ≥ t := by
  induction n with
  | zero =>
    obtain ‚ü®t, ht‚ü© := t ; simp [S.ht0] at ht ; subst ht
    simp [pmap, he‚ÇÄ]
  | succ n ih =>
    simp [pmap]
    by_cases h : t ‚â§ S.t n
    ¬∑ rw [concat_left]
      ¬∑ apply ih
      ¬∑ simp [*]
      ¬∑ exact h
    ¬∑ have : S.t n ‚â§ t := by simp at h ; exact h.le
      rw [concat_right _ _ this]
      ¬∑ simp [partial_map, hS]
        apply Trivialization.lift_proj
        apply hS
        refine ‚ü®this, t.2.2‚ü©
      ¬∑ simp [*]

@[simp] theorem map_zero (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : S.map Œ≥ e‚ÇÄ 0 = e‚ÇÄ := by
  simpa [firstval, S.ht0, map, pmap] using pmap_first hS he‚ÇÄ

@[simp] theorem map_apply (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (t : I) : p (S.map Œ≥ e‚ÇÄ t) = Œ≥ t := by
  simp [Setup.map, *]

@[simp] theorem map_comp (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : p ‚àò (S.map Œ≥ e‚ÇÄ) = Œ≥ := by
  ext t ; simp [*]

end fits

end Setup

theorem Lift (hp : IsCoveringMap p) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : ‚àÉ! Œì : C(I, E), Œì 0 = e‚ÇÄ ‚àß p ‚àò Œì = Œ≥ := by
  obtain ‚ü®S, hS‚ü© := Setup.exist hp Œ≥
  refine ‚ü®S.map Œ≥ e‚ÇÄ, ?_, fun Œì hŒì => ?_‚ü©
  ¬∑ simp [*]
  ¬∑ apply hp.lift_unique <;> simp [hŒì, *]

#print axioms Lift

section HomotopyLift

variable {Y : Type*} [TopologicalSpace Y]

def fiber (Œ≥ : C(I √ó Y, X)) : C(Y, C(I, X)) := Œ≥.comp prodSwap |>.curry

def square [LocallyCompactSpace Y] (Œ≥ : C(I, C(Y, X))) : C(I √ó Y, X) := Œ≥.uncurry

instance toto : CompactIccSpace I := ‚ü®fun {_ _} => isClosed_Icc.isCompact‚ü©

-- theorem eventually_fits (Œ≥ : C(Y, C(I, X))) (S : Setup p) (y‚ÇÄ : Y) (hS : S.fits (Œ≥ y‚ÇÄ)) :
--     ‚àÄ·∂† y in ùìù y‚ÇÄ, S.fits (Œ≥ y) := by
--   simp only [Setup.fits, eventually_all_finset] at hS ‚ä¢
--   peel hS with n hn hS
--   have h1 : IsCompact (Icc (S.t n) (S.t (n + 1))) := CompactIccSpace.isCompact_Icc
--   have h2 : IsOpen (S.T n).baseSet := (S.T n).open_baseSet
--   exact Œ≥.2.tendsto y‚ÇÄ <| ContinuousMap.eventually_mapsTo h1 h2 hS

noncomputable def fiber_lift (hp : IsCoveringMap p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) (y : Y) : C(I, E) :=
  (Lift hp (hŒì‚ÇÄ y)).choose

noncomputable def fiber_map (S : Setup p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E) (y : Y) : C(I, E) :=
  S.map (Œ≥ y) (Œì‚ÇÄ y)

theorem map_eq_lift (hp : IsCoveringMap p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) (y : Y) (S : Setup p) (hS : S.fits (Œ≥ y)) :
    fiber_map S Œ≥ Œì‚ÇÄ y = fiber_lift hp Œ≥ Œì‚ÇÄ hŒì‚ÇÄ y :=
  (Lift hp (hŒì‚ÇÄ y)).choose_spec.2 _ ‚ü®hS.map_zero (hŒì‚ÇÄ y), hS.map_comp (hŒì‚ÇÄ y)‚ü©

noncomputable def fiber_partial_map (S : Setup p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (y : {y // S.fits (Œ≥ y)}) : C(I, E) :=
  fiber_map S Œ≥ Œì‚ÇÄ y

theorem continuous_fiber_partial_map (S : Setup p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) : Continuous (fiber_partial_map S Œ≥ Œì‚ÇÄ) := by
  rw [continuous_iff_continuousAt] ; intro y
  unfold fiber_partial_map fiber_map Setup.map
  sorry

end HomotopyLift
