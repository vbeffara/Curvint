import Mathlib

open Set Topology Metric unitInterval Filter ContinuousMap

namespace ContinuousMap

variable
  {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] {a b c : Œ±}
  {E : Type*} [TopologicalSpace E]

def firstval (hab : a ‚â§ b) (f : C(Icc a b, E)) : E := f ‚ü®a, left_mem_Icc.2 hab‚ü©

def lastval (hab : a ‚â§ b) (f : C(Icc a b, E)) : E := f ‚ü®b, right_mem_Icc.2 hab‚ü©

noncomputable def concat (h : b ‚àà Icc a c) (f : C(Icc a b, E)) (g : C(Icc b c, E)) :
    C(Icc a c, E) := by
  by_cases hb : f.lastval h.1 = g.firstval h.2
  ¬∑ let h (t : Œ±) : E := if t ‚â§ b then IccExtend h.1 f t else IccExtend h.2 g t
    suffices Continuous h from ‚ü®fun t => h t, by fun_prop‚ü©
    apply Continuous.if_le (by fun_prop) (by fun_prop) continuous_id continuous_const
    rintro x rfl ; simpa
  ¬∑ exact .const _ (f ‚ü®a, left_mem_Icc.mpr h.1‚ü©)

@[simp] theorem concat_left {f : C(Icc a b, E)} {g : C(Icc b c, E)} (h : b ‚àà Icc a c)
    (hb : f.lastval h.1 = g.firstval h.2) {t : Icc a c} (ht : t ‚â§ b) :
    concat h f g t = f ‚ü®t, t.2.1, ht‚ü© := by
  simp [concat, hb, ht, IccExtend_apply, t.2.1]

@[simp] theorem concat_right {f : C(Icc a b, E)} {g : C(Icc b c, E)} (h : b ‚àà Icc a c)
    (hb : f.lastval h.1 = g.firstval h.2) {t : Icc a c} (ht : b ‚â§ t) :
    concat h f g t = g ‚ü®t, ht, t.2.2‚ü© := by
  simp [concat, hb, ht, IccExtend_apply, t.2.2, h.1]
  intro ht' ; have : b = t := le_antisymm ht ht' ; simpa [‚Üê this]

end ContinuousMap

variable
  {E X Z: Type*} [TopologicalSpace E] [TopologicalSpace X] [TopologicalSpace Z]
  {p : E ‚Üí X} {Œ≥ : C(I, X)} {x x‚ÇÄ : X} {e‚ÇÄ : E}

namespace Trivialization

def lift (T : Trivialization Z p) (e : E) (x : X) : E := T.invFun (x, (T e).2)

@[simp] theorem lift_self (T : Trivialization Z p) (e : E) (hx : p e ‚àà T.baseSet) :
    T.lift e (p e) = e := by
  simp [lift] ; rw [symm_apply_mk_proj] ; rwa [mem_source]

@[simp] theorem lift_proj (T : Trivialization Z p) (e : E) (x : X) (hx : x ‚àà T.baseSet) :
    p (T.lift e x) = x := by
  simp [lift] ; apply proj_symm_apply ; rwa [mem_target]

end Trivialization

namespace IsCoveringMap

theorem eq_of_comp_eq' (hp : IsCoveringMap p) {A : Type*} [TopologicalSpace A] [PreconnectedSpace A]
    {g‚ÇÅ g‚ÇÇ : C(A, E)} (he : p ‚àò g‚ÇÅ = p ‚àò g‚ÇÇ) {a : A} (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ :=
  ContinuousMap.ext (congrFun <| hp.eq_of_comp_eq g‚ÇÅ.continuous_toFun g‚ÇÇ.continuous_toFun he a ha)

theorem lift_unique (hp : IsCoveringMap p) {Œì‚ÇÅ Œì‚ÇÇ : C(I, E)} (h0 : Œì‚ÇÅ 0 = Œì‚ÇÇ 0)
    (h : p ‚àò Œì‚ÇÅ = p ‚àò Œì‚ÇÇ) : Œì‚ÇÅ = Œì‚ÇÇ := by
  exact hp.eq_of_comp_eq' h h0

end IsCoveringMap

structure Setup (p : E ‚Üí X) where
  t : ‚Ñï ‚Üí I
  n : ‚Ñï
  --
  ht : Monotone t
  ht0 : t 0 = 0
  ht1 : ‚àÄ m ‚â• n, t m = 1
  --
  c : ‚Ñï ‚Üí X
  T (n : ‚Ñï) : Trivialization (p ‚Åª¬π' {c n}) p

namespace Setup

variable {S : Setup p} {n : ‚Ñï}

theorem left_mem : S.t n ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

theorem right_mem : S.t (n + 1) ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

def chain (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : ‚Ñï ‚Üí E
  | 0 => e‚ÇÄ
  | n + 1 => (S.T n).lift (S.chain Œ≥ e‚ÇÄ n) (Œ≥ (S.t (n + 1)))

def fits (S : Setup p) (Œ≥ : C(I, X)) : Prop :=
  ‚àÄ n ‚àà Finset.Iic S.n, Set.Icc (S.t n) (S.t (n + 1)) ‚äÜ Œ≥ ‚Åª¬π' (S.T n).baseSet

noncomputable def exist (hp : IsCoveringMap p) (Œ≥ : C(I, X)) : { S : Setup p // S.fits Œ≥ } := by
  let T (t : I) : Trivialization (p ‚Åª¬π' {Œ≥ t}) p := Classical.choose (hp (Œ≥ t)).2
  let mem_T (t : I) : Œ≥ t ‚àà (T t).baseSet := Classical.choose_spec (hp (Œ≥ t)).2
  let V (t : I) : Set I := Œ≥ ‚Åª¬π' (T t).baseSet
  have h1 t : IsOpen (V t) := (T t).open_baseSet.preimage Œ≥.continuous
  have h2 : univ ‚äÜ ‚ãÉ t, V t := by intro t _ ; rw [mem_iUnion] ; use t ; apply mem_T
  have := exists_monotone_Icc_subset_open_cover_unitInterval h1 h2
  choose t ht0 ht ht1 c hc using this
  choose n ht1 using ht1
  exact ‚ü®‚ü®t, n, ht, ht0, ht1, fun n => Œ≥ (c n), fun n => T (c n)‚ü©, fun n _ => hc n‚ü©

namespace fits

theorem chain_proj (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï) (hn : n ‚àà Finset.Iic S.n) :
    p (S.chain Œ≥ e‚ÇÄ n) = Œ≥ (S.t n) := by
  cases n with
  | zero => simp [chain, he‚ÇÄ, S.ht0]
  | succ n =>
    have hn' : n ‚àà Finset.Iic S.n := by simp at hn ‚ä¢ ; omega
    apply Trivialization.lift_proj ; apply hS n hn' ; apply S.right_mem

def partial_map (hS : S.fits Œ≥) (e‚ÇÄ : E) (n : ‚Ñï) (hn : n ‚àà Finset.Iic S.n) :
    C(Icc (S.t n) (S.t (n + 1)), E) := by
  let f (t : (Icc (S.t n) (S.t (n + 1)))) : E := (S.T n).lift (S.chain Œ≥ e‚ÇÄ n) (Œ≥ ‚Üët)
  have : Continuous f := by
    apply (S.T n).continuousOn_invFun.comp_continuous (by fun_prop)
    intro t ; rw [Trivialization.mem_target] ; exact hS n hn t.2
  exact ‚ü®f, this‚ü©

@[simp] theorem partial_map_left (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï) (hn : n ‚àà Finset.Iic S.n) :
    hS.partial_map e‚ÇÄ n hn ‚ü®_, left_mem‚ü© = S.chain Œ≥ e‚ÇÄ n := by
  have h1 := hS.chain_proj he‚ÇÄ n hn
  simp [partial_map, ‚Üê h1] ; apply (S.T _).lift_self ; simp [h1] ; apply hS n hn ; apply S.left_mem

@[simp] theorem partial_map_right (hS : S.fits Œ≥) (e‚ÇÄ : E) (n : ‚Ñï) (hn : n ‚àà Finset.Iic S.n) :
    hS.partial_map e‚ÇÄ n hn ‚ü®_, right_mem‚ü© = S.chain Œ≥ e‚ÇÄ (n + 1) := by
  simp [fits.partial_map] ; rfl

noncomputable def pmap (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) :
    ‚àÄ n ‚àà Finset.Iic S.n,
      { f : C(Icc (S.t 0) (S.t n), E) // f.lastval (S.ht (Nat.zero_le n)) = S.chain Œ≥ e‚ÇÄ n }
  | 0 => fun _ => ‚ü®.const _ e‚ÇÄ, by simp [lastval, chain]‚ü©
  | n + 1 => by
    intro hn1
    have hn : n ‚àà Finset.Iic S.n := by simp at hn1 ‚ä¢ ; omega
    let f := hS.pmap he‚ÇÄ n hn
    have h1 : S.t 0 ‚â§ S.t n := by apply S.ht ; simp
    have h2 : S.t n ‚â§ S.t (n + 1) := by apply S.ht ; simp
    have h3 : lastval h1 ‚Üëf = firstval h2 (hS.partial_map e‚ÇÄ n hn) := by
      simpa [lastval, firstval, he‚ÇÄ] using f.prop
    let g := f.1.concat ‚ü®h1, h2‚ü© (hS.partial_map e‚ÇÄ n hn)
    have h4 : lastval (h1.trans h2) g = S.chain Œ≥ e‚ÇÄ (n + 1) := by
      by_cases h : S.t (n + 1) ‚â§ S.t n
      ¬∑ rw [lastval, concat_left _ h3]
        ¬∑ have h1 : S.t n ‚â§ S.t (n + 1) := by apply S.ht ; simp
          have h2 : S.t (n + 1) = S.t n := le_antisymm h h1
          have h3 := hS.chain_proj he‚ÇÄ n hn
          rw [chain] ; simp [h2, f.prop, ‚Üê h3]
          rw [(S.T _).lift_self] ; exact f.prop
          simp [h3] ; apply hS n hn ; apply S.left_mem
        ¬∑ exact h
      ¬∑ rw [lastval, concat_right _ h3]
        ¬∑ simp
        ¬∑ apply S.ht ; simp
    exact ‚ü®g, h4‚ü©

@[simp] theorem pmap_zero (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï) (hn : n ‚àà Finset.Iic S.n) :
    (hS.pmap he‚ÇÄ n hn).1 ‚ü®0, by simp [S.ht0]‚ü© = e‚ÇÄ := by
  induction n with
  | zero => rfl
  | succ n ih =>
    simp [fits.pmap]
    rw [concat_left]
    ¬∑ apply ih
    ¬∑ simp [firstval]
      have : n ‚àà Finset.Iic S.n := by (simp at hn ‚ä¢ ; omega)
      rw [hS.pmap he‚ÇÄ n this |>.2]
      rw [partial_map_left]
      exact he‚ÇÄ
    ¬∑ simp


@[simp] theorem pmap_apply (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (n : ‚Ñï) (hn : n ‚àà Finset.Iic S.n)
    (t : Icc (S.t 0) (S.t n)) : p ((hS.pmap he‚ÇÄ n hn).1 t) = Œ≥ t := by
  induction n with
  | zero => rcases t with ‚ü®t, ht‚ü© ; simp [S.ht0] at ht ; subst ht ; simpa [pmap]
  | succ n ih =>
    simp [pmap] ; by_cases h : t ‚â§ S.t n
    ¬∑ rw [concat_left]
      apply ih
      ¬∑ -- TODO this is duplicated
        have : n ‚àà Finset.Iic S.n := by (simp at hn ‚ä¢ ; omega)
        simp [firstval]
        rw [hS.pmap he‚ÇÄ n this |>.2]
        rw [partial_map_left]
        exact he‚ÇÄ
      ¬∑ exact h
    ¬∑ have : S.t n ‚â§ t := by simp at h ; exact h.le
      rw [concat_right _ _ this]
      ¬∑ simp [fits.partial_map]
        apply Trivialization.lift_proj ; apply hS ; simp at hn ‚ä¢ ; omega ; simp [this, t.2.2]
      ¬∑ -- TODO this is duplicated
        have : n ‚àà Finset.Iic S.n := by (simp at hn ‚ä¢ ; omega)
        simp [firstval]
        rw [hS.pmap he‚ÇÄ n this |>.2]
        rw [partial_map_left]
        exact he‚ÇÄ

noncomputable def map (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : C(I, E) := by
  have h1 (t : I) : t ‚àà Icc (S.t 0) (S.t S.n) := by
    rcases t with ‚ü®t, ht0, ht1‚ü©
    simp [S.ht0, S.ht1]
    simpa using ht1
  let f (t : I) := (hS.pmap he‚ÇÄ S.n (by simp)).1 ‚ü®t, h1 t‚ü©
  have h2 : Continuous f := by fun_prop
  exact ‚ü®f, h2‚ü©

@[simp] theorem map_zero (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : hS.map he‚ÇÄ 0 = e‚ÇÄ := by
  simp [map]

@[simp] theorem map_apply (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (t : I) : p (hS.map he‚ÇÄ t) = Œ≥ t := by
  simp [fits.map]

@[simp] theorem map_comp (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : p ‚àò hS.map he‚ÇÄ = Œ≥ := by ext t ; simp

end fits

end Setup

theorem Lift (hp : IsCoveringMap p) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : ‚àÉ! Œì : C(I, E), Œì 0 = e‚ÇÄ ‚àß p ‚àò Œì = Œ≥ := by
  obtain ‚ü®S, hS‚ü© := Setup.exist hp Œ≥
  refine ‚ü®hS.map he‚ÇÄ, by simp, fun Œì hŒì => ?_‚ü©
  apply hp.lift_unique <;> simp [hŒì]

#print axioms Lift

section HomotopyLift

variable {Y : Type*} [TopologicalSpace Y]

def fiber (Œ≥ : C(I √ó Y, X)) : C(Y, C(I, X)) := Œ≥.comp prodSwap |>.curry

def square [LocallyCompactSpace Y] (Œ≥ : C(I, C(Y, X))) : C(I √ó Y, X) := Œ≥.uncurry

instance toto : CompactIccSpace I := ‚ü®fun {_ _} => isClosed_Icc.isCompact‚ü©

theorem eventually_fits (Œ≥ : C(Y, C(I, X))) (S : Setup p) (y‚ÇÄ : Y) (hS : S.fits (Œ≥ y‚ÇÄ)) :
    ‚àÄ·∂† y in ùìù y‚ÇÄ, S.fits (Œ≥ y) := by
  simp only [Setup.fits, eventually_all_finset] at hS ‚ä¢
  peel hS with n hn hS
  have h1 : IsCompact (Icc (S.t n) (S.t (n + 1))) := CompactIccSpace.isCompact_Icc
  have h2 : IsOpen (S.T n).baseSet := (S.T n).open_baseSet
  exact Œ≥.2.tendsto y‚ÇÄ <| ContinuousMap.eventually_mapsTo h1 h2 hS

noncomputable def fiber_lift (hp : IsCoveringMap p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) (y : Y) : C(I, E) :=
  (Lift hp (hŒì‚ÇÄ y)).choose

noncomputable def fiber_map (S : Setup p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) (y : Y) (hS : S.fits (Œ≥ y)) : C(I, E) :=
  hS.map (hŒì‚ÇÄ y)

theorem map_eq_lift (hp : IsCoveringMap p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) (y : Y) (S : Setup p) (hS : S.fits (Œ≥ y)) :
    fiber_map S Œ≥ Œì‚ÇÄ hŒì‚ÇÄ y hS = fiber_lift hp Œ≥ Œì‚ÇÄ hŒì‚ÇÄ y :=
  (Lift hp (hŒì‚ÇÄ y)).choose_spec.2 _ ‚ü®hS.map_zero (hŒì‚ÇÄ y), hS.map_comp (hŒì‚ÇÄ y)‚ü©

noncomputable def fiber_partial_map (S : Setup p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) (y : {y // S.fits (Œ≥ y)}) : C(I, E) :=
  fiber_map S Œ≥ Œì‚ÇÄ hŒì‚ÇÄ y y.2

theorem continuous_fiber_partial_map (S : Setup p) (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E)
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0) : Continuous (fiber_partial_map S Œ≥ Œì‚ÇÄ hŒì‚ÇÄ) := by
  rw [continuous_iff_continuousAt] ; intro y
  unfold fiber_partial_map fiber_map Setup.fits.map
  sorry

end HomotopyLift
