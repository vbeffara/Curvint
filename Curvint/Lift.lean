import Mathlib.Topology.ContinuousMap.Interval
import Mathlib.Topology.UnitInterval
import Mathlib.Topology.Covering
import Mathlib.Tactic.Peel

open Set Topology unitInterval Filter ContinuousMap

local instance : Fact ((0 : ‚Ñù) ‚â§ 1) := ‚ü®zero_le_one‚ü©

variable {A E X Y Z : Type*} [TopologicalSpace E] [TopologicalSpace X] [TopologicalSpace Y]
  [TopologicalSpace Z] [TopologicalSpace A]
  {f : E ‚Üí X} (hf : IsCoveringMap f) {e e‚ÇÄ : E} {x x‚ÇÄ : X} {Œ≥ : C(I, X)} {m n : ‚Ñï}

namespace IsCoveringMap

section compeq

include hf in
theorem eq_of_comp_eq_CM [PreconnectedSpace A] {g‚ÇÅ g‚ÇÇ : C(A, E)} (h : f ‚àò g‚ÇÅ = f ‚àò g‚ÇÇ)
    (a : A) (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ :=
  coe_injective <| hf.eq_of_comp_eq g‚ÇÅ.continuous g‚ÇÇ.continuous h a ha

end compeq

/-- Subdivision of an interval with an associated sequence of trivializations of the covering `p`.
  One can lift a path `Œ≥` by gluing local lifts along such a subdivision if it is adapted to it,
  see `fits`. -/
structure LiftSetup (p : E ‚Üí X) where
  /-- The bounds of the intervals in the subdivision. -/
  t : ‚Ñï ‚Üí ‚Ñù
  /-- The number of (non-trivial) pieces. -/
  n : ‚Ñï
  /-- The sequence of basepoints for the trivializations. -/
  c : ‚Ñï ‚Üí X
  /-- The trivializations. -/
  T : ‚àÄ i, Trivialization (p ‚Åª¬π' {c i}) p
  ht : Monotone t
  ht0 : t 0 = 0
  ht1 : ‚àÄ m ‚â• n, t m = 1

variable {S : LiftSetup f}

local instance : Fact (S.t 0 ‚â§ S.t n) := ‚ü®S.ht n.zero_le‚ü©

local instance : Fact (S.t n ‚â§ S.t (n + 1)) := ‚ü®S.ht n.le_succ‚ü©

namespace LiftSetup

/-- The `n`th interval in the partition contained in `S`. -/
abbrev icc (S : LiftSetup f) (n : ‚Ñï) : Set ‚Ñù := Icc (S.t n) (S.t (n + 1))

theorem htn : S.t S.n = 1 := S.ht1 S.n le_rfl

theorem mem_I : S.t n ‚àà I := by
  refine ‚ü®?_, ?_‚ü© <;> simp only [‚Üê S.ht0, ‚Üê S.ht1 (n + S.n) (by omega)] <;> apply S.ht <;> omega

@[simp]
theorem subset : Icc (S.t m) (S.t n) ‚äÜ I := by
  rintro t ‚ü®ht0, ht1‚ü© ; exact ‚ü®le_trans mem_I.1 ht0, le_trans ht1 mem_I.2‚ü©

attribute [simp] ht0 ht1

/-- The embedding of intervals adapted to the partition in `S` into the unit interval. -/
def inj (S : LiftSetup f) (m n : ‚Ñï) : C(Icc (S.t m) (S.t n), I) :=
  ‚ü®fun t => ‚ü®t, subset t.2‚ü©, by fun_prop‚ü©

/-- This holds if the path `Œ≥` maps each interval in the partition in `S` to the base set of the
corresponding trivialization. -/
def fits (S : LiftSetup f) (Œ≥ : C(I, X)) : Prop :=
  ‚àÄ n ‚àà Finset.range S.n, MapsTo (IccExtendCM Œ≥) (S.icc n) (S.T n).baseSet

theorem exist (hp : IsCoveringMap f) (Œ≥ : C(I, X)) : ‚àÉ S : LiftSetup f, S.fits Œ≥ := by
  choose T mem_T using fun t => (hp (Œ≥ t)).2
  let V (t : I) : Set I := Œ≥ ‚Åª¬π' (T t).baseSet
  have h1 t : IsOpen (V t) := (T t).open_baseSet.preimage Œ≥.continuous
  have h2 : univ ‚äÜ ‚ãÉ t, V t := fun t _ => mem_iUnion.2 ‚ü®t, mem_T t‚ü©
  choose t ht0 ht ht1 c hc using exists_monotone_Icc_subset_open_cover_unitInterval h1 h2
  obtain ‚ü®n, ht1‚ü© := ht1
  use ‚ü®(t ¬∑), n, Œ≥ ‚àò c, fun n => T (c n), ht, by simpa using ht0, by simpa using ht1‚ü©
  rintro k - s hs
  simpa [subset hs] using hc k hs

theorem fits.eventually {y‚ÇÄ : Y} {Œ≥ : C(Y, C(I, X))}
    (hS : S.fits (Œ≥ y‚ÇÄ)) : ‚àÄ·∂† y in ùìù y‚ÇÄ, S.fits (Œ≥ y) := by
  simp only [LiftSetup.fits, eventually_all_finset] at hS ‚ä¢
  peel hS with n hn hS
  have key := ContinuousMap.eventually_mapsTo CompactIccSpace.isCompact_Icc (S.T n).open_baseSet hS
  have h4 := IccExtendCM.2.tendsto (Œ≥ y‚ÇÄ) |>.eventually key
  exact Œ≥.2.tendsto y‚ÇÄ |>.eventually h4

/-- This describes a path which is adapted to a `LiftSetup` and a point in the fiber above its
starting point. -/
abbrev Liftable (S : LiftSetup f) := { Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß f Œ≥e.2 = Œ≥e.1 0 }

/-- A sub-path of a liftable path, as a bundled continuous map into the base set of the
corresponding trivialization. -/
def Œ≥n (Œ≥e : Liftable S) (hn : n ‚àà Finset.range S.n) : C(S.icc n, (S.T n).baseSet) := by
  refine ‚ü®fun t => ‚ü®Œ≥e.1.1 (S.inj _ _ t), ?_‚ü©, ?_‚ü©
  ¬∑ simpa [LiftSetup.subset t.2] using Œ≥e.2.1 n hn t.2
  ¬∑ fun_prop

private noncomputable def partial_lift (S : LiftSetup f) : ‚àÄ n ‚â§ S.n,
    {F : C(S.Liftable, C(Icc (S.t 0) (S.t n), E)) // ‚àÄ Œ≥e,
      F Œ≥e ‚ä• = Œ≥e.1.2 ‚àß ‚àÄ t, f (F Œ≥e t) = Œ≥e.1.1 (S.inj _ _ t)}
  | 0 => fun _ => by
    use ContinuousMap.const'.comp ‚ü®fun ye => ye.1.2, by fun_prop‚ü©
    rintro ‚ü®‚ü®Œ≥, e‚ü©, h1, h2‚ü©
    refine ‚ü®rfl, ?_‚ü©
    simp only [Subtype.forall, LiftSetup.ht0, Icc_self, mem_singleton_iff]
    rintro t rfl
    exact h2
  | n + 1 => fun hn => by
    obtain ‚ü®Œ¶, hŒ¶‚ü© := S.partial_lift n (by omega)
    replace hn : n ‚àà Finset.range S.n := by simp ; omega
    refine ‚ü®?_, ?_‚ü©
    ¬∑ refine (concatCM (b := S.t n)).comp ‚ü®?_, ?_‚ü©
      ¬∑ intro Œ≥e
        have h5 : f (Œ¶ Œ≥e ‚ä§) = Œ≥e.1.1 ‚ü®S.t n, _‚ü© := (hŒ¶ Œ≥e).2 ‚ä§
        have h6 : S.t n ‚àà S.icc n := by simpa using S.ht n.le_succ
        let left : C(‚Üë(Icc (S.t 0) (S.t n)), E) := Œ¶ Œ≥e
        let next : C(S.icc n, E) := by
          refine .comp ‚ü®_, continuous_subtype_val‚ü© <| (S.T n).clift (‚ü®left ‚ä§, ?_‚ü©, S.Œ≥n Œ≥e hn)
          simpa [Trivialization.mem_source, left, h5, LiftSetup.subset h6] using Œ≥e.2.1 n hn h6
        use ‚ü®left, next‚ü©
        simp only [comp_apply, coe_mk, next]
        rw [Trivialization.clift_self]
        simp only [hŒ¶, left, next]
        rfl
      ¬∑ refine Continuous.subtype_mk (continuous_prod_mk.2 ‚ü®by fun_prop, ?_‚ü©) _
        apply ContinuousMap.continuous_postcomp _ |>.comp
        apply (S.T n).clift.continuous.comp
        refine continuous_prod_mk.2 ‚ü®?_, ?_‚ü©
        ¬∑ exact (continuous_eval_const _).comp Œ¶.continuous |>.subtype_mk _
        ¬∑ let Œ® : C(S.Liftable √ó S.icc n, C(I, X) √ó I) :=
            ‚ü®fun fx => (fx.1.1.1, ‚ü®fx.2.1, LiftSetup.subset fx.2.2‚ü©), by fun_prop‚ü©
          let Œ¶ : C(S.Liftable √ó S.icc n, (S.T n).baseSet) := by
            refine ‚ü®fun fx => ‚ü®fx.1.1.1 ‚ü®fx.2.1, LiftSetup.subset fx.2.2‚ü©, ?_‚ü©, ?_‚ü©
            ¬∑ obtain ‚ü®_, _‚ü© := LiftSetup.subset fx.2.2
              have := fx.1.2.1 n hn fx.2.2
              rw [IccExtendCM_of_mem] at this ; assumption
            ¬∑ apply Continuous.subtype_mk
              exact ContinuousEval.continuous_eval.comp Œ®.continuous
          exact Œ¶.curry.continuous
    ¬∑ rintro ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© ; dsimp ; constructor
      ¬∑ rw [concatCM_left (S.ht n.zero_le)] ; exact hŒ¶ ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.1
      ¬∑ rintro ‚ü®t, ht‚ü©
        by_cases htn : t ‚â§ S.t n
        ¬∑ rw [concatCM_left htn] ; exact hŒ¶ ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.2 ‚ü®t, _‚ü©
        ¬∑ rw [concatCM_right <| le_of_not_le htn]
          simp only [comp_apply, coe_mk, Trivialization.proj_clift (proj := f)]
          rfl

/-- Lifting paths through a `LiftSetup`, as a bundled continuous map from paths adapted to the
setup. -/
noncomputable def lift (S : LiftSetup f) :
    {F : C(S.Liftable, C(I, E)) // ‚àÄ Œ≥e, F Œ≥e 0 = Œ≥e.1.2 ‚àß ‚àÄ t, f (F Œ≥e t) = Œ≥e.1.1 t} := by
  obtain ‚ü®F, hF‚ü© := S.partial_lift S.n le_rfl
  let Œ¶ : C(I, Icc (S.t 0) (S.t S.n)) := ‚ü®fun t => ‚ü®t, by simp‚ü©, by fun_prop‚ü©
  refine ‚ü®‚ü®fun Œ≥e => (F Œ≥e).comp Œ¶, by fun_prop‚ü©, fun Œ≥e => ‚ü®?_, fun t => ?_‚ü©‚ü©
  ¬∑ simpa [Bot.bot] using hF Œ≥e |>.1
  ¬∑ simpa [LiftSetup.inj] using hF Œ≥e |>.2 (Œ¶ t)

end LiftSetup

include hf

theorem exists_unique_lift (he : f e = Œ≥ 0) : ‚àÉ! Œì : C(I, E), Œì 0 = e ‚àß f ‚àò Œì = Œ≥ := by
  obtain ‚ü®S, hS‚ü© := LiftSetup.exist hf Œ≥
  obtain ‚ü®F, hF‚ü© := S.lift
  have h1 : F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© 0 = e := hF ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© |>.1
  have h2 : f ‚àò F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© = Œ≥ := by ext t ; exact hF ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© |>.2 t
  refine ‚ü®F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü©, ‚ü®h1, h2‚ü©, ?_‚ü©
  rintro Œì ‚ü®hŒì‚ÇÅ, hŒì‚ÇÇ‚ü©
  apply hf.eq_of_comp_eq_CM (a := 0) <;> simp [*]

/-- The path obtained by lifting through a covering map. -/
noncomputable def lift (Œ≥ : C(I, X)) (he : f e = Œ≥ 0) : C(I, E) :=
  (hf.exists_unique_lift he).choose

@[simp]
theorem lift_spec (Œ≥ : C(I, X)) (he : f e = Œ≥ 0) : hf.lift Œ≥ he 0 = e ‚àß f ‚àò hf.lift Œ≥ he = Œ≥ :=
  (hf.exists_unique_lift he).choose_spec.1

variable {Y : Type*} [TopologicalSpace Y] {Œ≥ : C(I √ó Y, X)} {Œì‚ÇÄ : C(Y, E)}

private def slice (Œ≥ : C(I √ó Y, X)) : C(Y, C(I, X)) := Œ≥.comp prodSwap |>.curry

private noncomputable def joint_lift (hŒì‚ÇÄ : ‚àÄ y, f (Œì‚ÇÄ y) = Œ≥ (0, y)) : C(Y, C(I, E)) := by
  use fun y => hf.lift (slice Œ≥ y) (hŒì‚ÇÄ y)
  rw [continuous_iff_continuousAt]
  intro y‚ÇÄ
  obtain ‚ü®S, hS‚ü© := LiftSetup.exist hf (slice Œ≥ y‚ÇÄ)
  apply ContinuousOn.continuousAt ?_ hS.eventually
  rw [continuousOn_iff_continuous_restrict]
  obtain ‚ü®G‚ÇÅ, hG‚ÇÅ‚ü© := S.lift
  let G‚ÇÇ : C({y // S.fits (slice Œ≥ y)}, S.Liftable) :=
    ‚ü®fun y => ‚ü®‚ü®slice Œ≥ y, Œì‚ÇÄ y‚ü©, y.2, hŒì‚ÇÄ y‚ü©, by fun_prop‚ü©
  convert G‚ÇÅ.comp G‚ÇÇ |>.continuous
  ext1 y
  have h3 := hG‚ÇÅ ‚ü®‚ü®slice Œ≥ y, Œì‚ÇÄ y‚ü©, y.2, hŒì‚ÇÄ y‚ü©
  apply hf.eq_of_comp_eq_CM (a := 0)
  ¬∑ simp [G‚ÇÇ, h3, hf.lift_spec]
  ¬∑ simp only [Set.restrict_apply, mem_setOf_eq, hf.lift_spec, comp_apply, coe_mk, G‚ÇÇ]
    ext t
    simp [h3]

theorem exists_unique_hlift (hŒì‚ÇÄ : ‚àÄ y, f (Œì‚ÇÄ y) = Œ≥ (0, y)) :
    ‚àÉ! Œì : C(I √ó Y, E), ‚àÄ y, Œì (0, y) = Œì‚ÇÄ y ‚àß f ‚àò (Œì ‚ü®¬∑, y‚ü©) = (Œ≥ ‚ü®¬∑, y‚ü©) := by
  refine ‚ü®hf.joint_lift hŒì‚ÇÄ |>.uncurry |>.comp prodSwap, ?_, ?_‚ü©
  ¬∑ exact fun y => hf.lift_spec (slice Œ≥ y) (hŒì‚ÇÄ y)
  ¬∑ rintro Œì hŒì ; ext1 ‚ü®t, y‚ü©
    have h1 : f (Œì‚ÇÄ y) = slice Œ≥ y 0 := hŒì‚ÇÄ y
    suffices (Œì.comp prodSwap |>.curry y) = (hf.lift _ h1) from ContinuousMap.congr_fun this t
    apply hf.eq_of_comp_eq_CM (a := 0)
    ¬∑ simp [lift_spec _ hf h1, hŒì]
    ¬∑ simp only [lift_spec]
      ext t
      have : f (Œì (t, y)) = Œ≥ (t, y) := congr_fun (hŒì y |>.2) t
      simp [this, slice]

theorem exists_unique_hlift' [LocallyCompactSpace Y] {Œ≥ : C(I, C(Y, X))}
    (hŒì‚ÇÄ : ‚àÄ y, f (Œì‚ÇÄ y) = Œ≥ 0 y) :
    ‚àÉ! Œì : C(I, C(Y, E)), ‚àÄ y, Œì 0 y = Œì‚ÇÄ y ‚àß f ‚àò (Œì ¬∑ y) = (Œ≥ ¬∑ y) := by
  obtain ‚ü®Œì, h1, h2‚ü© := exists_unique_hlift hf hŒì‚ÇÄ (Œ≥ := Œ≥.uncurry)
  refine ‚ü®Œì.curry, h1, fun Œì' h3 => ?_‚ü©
  simp [‚Üê h2 Œì'.uncurry h3] ; rfl

end IsCoveringMap

#print axioms IsCoveringMap.exists_unique_hlift
#lint
