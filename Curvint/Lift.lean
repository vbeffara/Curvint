import Mathlib

open Set Topology Metric unitInterval Filter ContinuousMap

namespace ContinuousMap

variable
  {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] {a b c : Œ±}
  {E : Type*} [TopologicalSpace E]

def subset {s‚ÇÅ s‚ÇÇ : Set E} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : C(s‚ÇÅ, s‚ÇÇ) := ‚ü®fun x => ‚ü®x.1, h x.2‚ü©, by fun_prop‚ü©

def subset_left (h : b ‚àà Icc a c) : C(Icc a b, Icc a c) := subset (Icc_subset_Icc le_rfl h.2)

def subset_right (h : b ‚àà Icc a c) : C(Icc b c, Icc a c) := subset (Icc_subset_Icc h.1 le_rfl)

def firstval (hab : a ‚â§ b) : C(C(Icc a b, E), E) := ‚ü®fun f => f ‚ü®a, le_rfl, hab‚ü©, by continuity‚ü©

def lastval (hab : a ‚â§ b) : C(C(Icc a b, E), E) := ‚ü®fun f => f ‚ü®b, hab, le_rfl‚ü©, by continuity‚ü©

def icce (hab : a ‚â§ b) : C(C(Icc a b, E), C(Œ±, E)) where
  toFun f := f.comp ‚ü®projIcc a b hab, continuous_projIcc‚ü©
  continuous_toFun := continuous_comp_left _

noncomputable def concat (h : b ‚àà Icc a c) (f : C(Icc a b, E)) (g : C(Icc b c, E)) : C(Icc a c, E) := by
  by_cases hb : lastval h.1 f = firstval h.2 g
  ¬∑ let h (t : Œ±) : E := if t ‚â§ b then icce h.1 f t else icce h.2 g t
    suffices Continuous h from ‚ü®fun t => h t, by fun_prop‚ü©
    apply Continuous.if_le (by fun_prop) (by fun_prop) continuous_id continuous_const
    rintro x rfl ; simpa [icce]
  ¬∑ exact .const _ (firstval h.1 f) -- junk value

variable {f : C(Icc a b, E)} {g : C(Icc b c, E)}

theorem concat_comp_left (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g) :
    f = (concat h f g).comp (subset_left h) := by
  ext x ; simp [concat, icce, hb, subset_left, subset, x.2.2]

theorem concat_comp_right (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g) :
    g = (concat h f g).comp (subset_right h) := by
  ext x ; by_cases hxb : x = b
  ¬∑ simp [concat, hb, subset_right, subset, hxb]
    simp [lastval, firstval] at hb ; simp [icce, hb] ; simp [‚Üê hxb]
  ¬∑ have := lt_of_le_of_ne x.2.1 (Ne.symm hxb) |>.not_le
    simp [concat, hb, subset_right, subset, x.2.2, this, icce]

@[simp] theorem concat_left (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g)
    {t : Icc a c} (ht : t ‚â§ b) : concat h f g t = f ‚ü®t, t.2.1, ht‚ü© := by
  nth_rewrite 2 [concat_comp_left h hb] ; rfl

@[simp] theorem concat_right (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g)
    {t : Icc a c} (ht : b ‚â§ t) : concat h f g t = g ‚ü®t, ht, t.2.2‚ü© := by
  nth_rewrite 2 [concat_comp_right h hb] ; rfl

variable {Œπ : Type*} {p : Filter Œπ} {F : Œπ ‚Üí C(Icc a b, E)} {G : Œπ ‚Üí C(Icc b c, E)} [CompactIccSpace Œ±]

theorem tendsto_concat (h : b ‚àà Icc a c) (hfg : ‚àÄ·∂† i in p, lastval h.1 (F i) = firstval h.2 (G i))
    (hfg' : lastval h.1 f = firstval h.2 g) (hf : Tendsto F p (ùìù f)) (hg : Tendsto G p (ùìù g)) :
    Tendsto (fun i => concat h (F i) (G i)) p (ùìù (concat h f g)) := by
  rw [tendsto_nhds_compactOpen] at hf hg ‚ä¢
  rintro K hK U hU hfgU
  let K‚ÇÅ : Set (Icc a b) := subset_left h ‚Åª¬π' K
  let K‚ÇÇ : Set (Icc b c) := subset_right h ‚Åª¬π' K
  have hK‚ÇÅ : IsCompact K‚ÇÅ := hK.preimage_continuous (subset_left h).2
  have hK‚ÇÇ : IsCompact K‚ÇÇ := hK.preimage_continuous (subset_right h).2
  have hfU : MapsTo f K‚ÇÅ U := by rw [concat_comp_left h hfg'] ; exact hfgU.comp (mapsTo_preimage _ _)
  have hgU : MapsTo g K‚ÇÇ U := by rw [concat_comp_right h hfg'] ; exact hfgU.comp (mapsTo_preimage _ _)
  filter_upwards [hf K‚ÇÅ hK‚ÇÅ U hU hfU, hg K‚ÇÇ hK‚ÇÇ U hU hgU, hfg] with i hf hg hfg x hx
  by_cases hx' : x ‚â§ b
  ¬∑ simpa [concat_left h hfg hx'] using hf hx
  ¬∑ simpa [concat_right h hfg (lt_of_not_le hx' |>.le)] using hg hx

def restr {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {A : Set Œ±} {B : Set Œ≤} (hS : IsOpen B) :
    C({f : C(A, Œ≤) // range f ‚äÜ B}, C(A, B)) := by
  refine ‚ü®fun Œ≥ => ‚ü®fun t => ‚ü®Œ≥.1 t, Œ≥.2 (mem_range_self t)‚ü©, by fun_prop‚ü©, ?_‚ü©
  refine (continuous_compactOpen.mpr ?_)
  intro K hK U hU
  have h1 := isOpen_setOf_mapsTo hK <| hS.isOpenMap_subtype_val U hU
  convert isOpen_induced h1 ; ext ‚ü®Œ≥, hŒ≥‚ü© ; constructor
  ¬∑ intro h t ht ; simpa using ‚ü®hŒ≥ <| mem_range_self _, h ht‚ü©
  ¬∑ intro h t ht ; obtain ‚ü®‚ü®a, ha‚ü©, b1, rfl‚ü© := h ht ; assumption

end ContinuousMap

variable
  {E X Z: Type*} [TopologicalSpace E] [TopologicalSpace X] [TopologicalSpace Z]
  {p : E ‚Üí X} {Œ≥ : C(I, X)} {x x‚ÇÄ : X} {e‚ÇÄ : E} {a b : ‚Ñù}

namespace Trivialization

variable {T : Trivialization Z p}

@[deprecated]
abbrev S' (T : Trivialization Z p) := T.source √óÀ¢ T.baseSet
abbrev S (T : Trivialization Z p) := T.source √ó T.baseSet
abbrev Œì (T : Trivialization Z p) (a b : ‚Ñù) := {Œ≥ : C(Icc a b, X) // range Œ≥ ‚äÜ T.baseSet}

def lift (T : Trivialization Z p) (e : E) (x : X) : E := T.invFun (x, (T e).2)

def liftCM (T : Trivialization Z p) : C(T.S, T.source) where
  toFun ex := ‚ü®T.lift ex.1 ex.2, T.map_target (by simp [mem_target])‚ü©
  continuous_toFun := by
    apply Continuous.subtype_mk
    refine T.continuousOn_invFun.comp_continuous ?_ (by simp [mem_target])
    apply continuous_prod_mk.mpr ‚ü®by fun_prop, ?_‚ü©
    apply continuous_snd.comp
    exact T.continuousOn_toFun.comp_continuous (by fun_prop) (by simp)

@[simp] theorem lift_self (T : Trivialization Z p) (e : E) (hx : p e ‚àà T.baseSet) :
    T.lift e (p e) = e := by
  simp [lift] ; rw [symm_apply_mk_proj] ; rwa [mem_source]

@[simp] theorem lift_proj (T : Trivialization Z p) (e : E) (hx : x ‚àà T.baseSet) :
    p (T.lift e x) = x := by
  simp [lift] ; apply proj_symm_apply ; rwa [mem_target]

def clift (T : Trivialization Z p) : C(T.source √ó T.Œì a b, C(Icc a b, T.source)) := by
  sorry

@[deprecated]
def œÜ (T : Trivialization Z p) : C(T.source, C(T.baseSet, T.source)) := T.liftCM.curry

def lift_cmap (T : Trivialization Z p) (e : T.source) : C(T.Œì a b, C(Icc a b, T.source)) := by
  let œÜ‚ÇÅ : C(T.Œì a b, C(Icc a b, T.baseSet)) := restr T.open_baseSet
  let œÜ‚ÇÉ : C(C(‚Üë(Icc a b), ‚ÜëT.baseSet), C(‚Üë(Icc a b), T.source)) := {
    toFun := by
      intro f
      refine ContinuousMap.comp ?_ f
      exact T.liftCM.curry e
    continuous_toFun := continuous_comp _ }
  exact œÜ‚ÇÉ.comp œÜ‚ÇÅ

def lift_cmap_2 (T : Trivialization Z p) (eŒ≥ : T.source √ó T.Œì a b) : C(Icc a b, T.source) := by
  exact lift_cmap T eŒ≥.1 eŒ≥.2

theorem continuous_cmap_2 {T : Trivialization Z p} :
    Continuous (lift_cmap_2 (a := a) (b := b) T) := by
  let œÜ‚ÇÅ : C(T.Œì a b, C(Icc a b, T.baseSet)) := by
    exact restr T.open_baseSet
  let œÜ‚ÇÉ e : C(C(‚Üë(Icc a b), ‚ÜëT.baseSet), C(‚Üë(Icc a b), T.source)) := by
    exact ‚ü®fun f => (T.œÜ e).comp f, continuous_comp _‚ü©
  unfold lift_cmap_2 lift_cmap ; simp
  change Continuous fun eŒ≥ ‚Ü¶ (T.œÜ eŒ≥.1).comp (œÜ‚ÇÅ eŒ≥.2)

  let E‚ÇÅ := C(‚Üë(Icc a b), ‚ÜëT.baseSet)
  let E‚ÇÇ := C(T.baseSet, T.source)
  let Œ¶ : E‚ÇÅ √ó E‚ÇÇ ‚Üí C(Icc a b, T.source) := fun f => f.2.comp f.1
  have h‚ÇÅ : Continuous Œ¶ := by
    haveI : LocallyCompactSpace T.baseSet := sorry
    apply ContinuousMap.continuous_comp'

  change Continuous fun eŒ≥ ‚Ü¶ Œ¶ ((œÜ‚ÇÅ eŒ≥.2), (T.œÜ eŒ≥.1))
  apply h‚ÇÅ.comp
  simp ; constructor
  ¬∑ fun_prop
  ¬∑ simp [œÜ, Trivialization.lift]
    sorry

end Trivialization

namespace IsCoveringMap

theorem eq_of_comp_eq' (hp : IsCoveringMap p) {A : Type*} [TopologicalSpace A] [PreconnectedSpace A]
    {g‚ÇÅ g‚ÇÇ : C(A, E)} (he : p ‚àò g‚ÇÅ = p ‚àò g‚ÇÇ) {a : A} (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ :=
  ContinuousMap.ext (congrFun <| hp.eq_of_comp_eq g‚ÇÅ.continuous_toFun g‚ÇÇ.continuous_toFun he a ha)

theorem lift_unique (hp : IsCoveringMap p) {Œì‚ÇÅ Œì‚ÇÇ : C(I, E)} (h0 : Œì‚ÇÅ 0 = Œì‚ÇÇ 0)
    (h : p ‚àò Œì‚ÇÅ = p ‚àò Œì‚ÇÇ) : Œì‚ÇÅ = Œì‚ÇÇ := by
  exact hp.eq_of_comp_eq' h h0

end IsCoveringMap

structure Setup (p : E ‚Üí X) where
  t : ‚Ñï ‚Üí ‚Ñù
  n : ‚Ñï
  --
  ht : Monotone t
  ht0 : t 0 = 0
  ht1 : ‚àÄ m ‚â• n, t m = 1
  --
  c : ‚Ñï ‚Üí X
  T (i : ‚Ñï) : Trivialization (p ‚Åª¬π' {c i}) p

namespace Setup

variable {S : Setup p} {m n : ‚Ñï}

@[simp] theorem htn : S.t S.n = 1 := S.ht1 S.n le_rfl

@[simp] theorem mem_I : S.t n ‚àà I := by
  refine ‚ü®?_, ?_‚ü© <;> simp [‚Üê S.ht0, ‚Üê S.ht1 (n + S.n) (by omega)] <;> apply S.ht <;> omega

@[simp] theorem left_mem : S.t n ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

@[simp] theorem right_mem : S.t (n + 1) ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

@[simp] theorem subset : Icc (S.t m) (S.t n) ‚äÜ I := by
  rintro t ‚ü®ht0, ht1‚ü© ; exact ‚ü®le_trans mem_I.1 ht0, le_trans ht1 mem_I.2‚ü©

def chain (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : ‚Ñï ‚Üí E
  | 0 => e‚ÇÄ
  | n + 1 => (S.T n).lift (S.chain Œ≥ e‚ÇÄ n) (Œ≥ ‚ü®S.t (n + 1), S.mem_I‚ü©)

def fits (S : Setup p) (Œ≥ : C(I, X)) : Prop :=
  ‚àÄ n ‚àà Finset.range S.n, MapsTo (icce zero_le_one Œ≥) (Icc (S.t n) (S.t (n + 1))) (S.T n).baseSet

noncomputable def exist (hp : IsCoveringMap p) (Œ≥ : C(I, X)) : { S : Setup p // S.fits Œ≥ } := by
  let T (t : I) : Trivialization (p ‚Åª¬π' {Œ≥ t}) p := Classical.choose (hp (Œ≥ t)).2
  let mem_T (t : I) : Œ≥ t ‚àà (T t).baseSet := Classical.choose_spec (hp (Œ≥ t)).2
  let V (t : I) : Set I := Œ≥ ‚Åª¬π' (T t).baseSet
  have h1 t : IsOpen (V t) := (T t).open_baseSet.preimage Œ≥.continuous
  have h2 : univ ‚äÜ ‚ãÉ t, V t := by intro t _ ; rw [mem_iUnion] ; use t ; apply mem_T
  have := exists_monotone_Icc_subset_open_cover_unitInterval h1 h2
  choose t ht0 ht ht1 c hc using this
  choose n ht1 using ht1
  refine ‚ü®‚ü®fun n => t n, n, ht, by simpa using ht0, by simpa using ht1, fun n => Œ≥ (c n), fun n => T (c n)‚ü©, ?_‚ü©
  rintro k - s hs
  simpa [icce, projIcc, (t k).2.1 |>.trans hs.1, hs.2.trans (t (k + 1)).2.2] using hc k hs

def partial_map' (hS : S.fits Œ≥) (e‚ÇÄ : E) (hn : n ‚àà Finset.range S.n) :
    C(Icc (S.t n) (S.t (n + 1)), E) := by
  let f (t : (Icc (S.t n) (S.t (n + 1)))) : E := by
    exact (S.T n).lift (S.chain Œ≥ e‚ÇÄ n) (Œ≥ ‚ü®t.1, S.subset t.2‚ü©)
  use f
  apply (S.T n).continuousOn_invFun.comp_continuous
  ¬∑ simp ; constructor <;> fun_prop
  ¬∑ intro t
    rw [Trivialization.mem_target]
    have htI := S.subset t.2
    simpa [icce, projIcc, htI.1, htI.2] using hS n hn t.2

noncomputable def partial_map (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) (n : ‚Ñï) :
    C(Icc (S.t n) (S.t (n + 1)), E) := by
  by_cases hn : n ‚àà Finset.range S.n
  ¬∑ by_cases hS : S.fits Œ≥
    ¬∑ exact partial_map' hS e‚ÇÄ hn
    ¬∑ exact .const _ (S.chain Œ≥ e‚ÇÄ n)
  ¬∑ exact .const _ (S.chain Œ≥ e‚ÇÄ n)

noncomputable def pmap (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : ‚àÄ n, C(Icc (S.t 0) (S.t n), E)
  | 0 => .const _ e‚ÇÄ
  | n + 1 => concat ‚ü®S.ht (by omega), S.ht (by omega)‚ü© (pmap S Œ≥ e‚ÇÄ n) (S.partial_map Œ≥ e‚ÇÄ n)

noncomputable def map (S : Setup p) (Œ≥ : C(I, X)) (e‚ÇÄ : E) : C(I, E) := by
  have h1 (t : I) : t.1 ‚àà Icc (S.t 0) (S.t S.n) := by
    rcases t with ‚ü®t, ht0, ht1‚ü©
    simp [*, S.ht0]
  let f (t : I) := S.pmap Œ≥ e‚ÇÄ S.n ‚ü®t, h1 t‚ü©
  have h2 : Continuous f := by fun_prop
  exact ‚ü®f, h2‚ü©

namespace fits

theorem chain_proj (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (hn : n ‚â§ S.n):
    p (S.chain Œ≥ e‚ÇÄ n) = Œ≥ ‚ü®S.t n, mem_I‚ü© := by
  cases n with
  | zero => simp [chain, he‚ÇÄ, S.ht0]
  | succ n =>
    have hn : n ‚àà Finset.range S.n := by simp ; omega
    apply Trivialization.lift_proj
    simpa [icce, projIcc, mem_I.1, mem_I.2] using hS n hn <| S.right_mem

@[simp] theorem partial_map_left (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (hn : n ‚àà Finset.range S.n) :
    firstval (S.ht (by omega)) (partial_map S Œ≥ e‚ÇÄ n) = S.chain Œ≥ e‚ÇÄ n := by
  have h2 : n < S.n := by simpa using hn
  have h1 := hS.chain_proj he‚ÇÄ h2.le
  simp [firstval, partial_map, partial_map', ‚Üê h1, hS, h2]
  apply (S.T _).lift_self ; simp [h1]
  simpa [icce, projIcc, mem_I.1, mem_I.2] using hS n hn <| S.left_mem

@[simp] theorem partial_map_right (hS : S.fits Œ≥) (e‚ÇÄ : E) (hn : n ‚àà Finset.range S.n) :
    partial_map S Œ≥ e‚ÇÄ n ‚ü®_, right_mem‚ü© = S.chain Œ≥ e‚ÇÄ (n + 1) := by
  simp only [partial_map, hS, hn] ; rfl

@[simp] theorem pmap_last (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (hn : n ‚â§ S.n) :
    lastval (S.ht (by omega)) (pmap S Œ≥ e‚ÇÄ n) = S.chain Œ≥ e‚ÇÄ n := by
  induction n with
  | zero => rfl
  | succ n ih =>
    have hn' : n ‚àà Finset.range S.n := by simp ; omega
    simp [lastval] ; rw [pmap, concat_right]
    ¬∑ rw [partial_map_right] ; exact hS ; exact hn'
    ¬∑ rw [ih, partial_map_left]
      ¬∑ exact hS
      ¬∑ exact he‚ÇÄ
      ¬∑ exact hn'
      ¬∑ omega
    ¬∑ apply S.ht ; omega

@[simp] theorem pmap_first (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (hn : n ‚â§ S.n) :
    firstval (S.ht (by omega)) (pmap S Œ≥ e‚ÇÄ n) = e‚ÇÄ := by
  induction n with
  | zero => rfl
  | succ n ih =>
    have hn' : n ‚àà Finset.range S.n := by simp ; omega
    simp [firstval]
    rw [pmap, concat_left]
    ¬∑ apply ih ; omega
    ¬∑ rw [partial_map_left hS he‚ÇÄ hn']
      rw [pmap_last hS he‚ÇÄ]
      omega
    ¬∑ apply S.ht ; omega

@[simp] theorem pmap_apply (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (hn : n ‚â§ S.n)
    (t : Icc (S.t 0) (S.t n)) : p (pmap S Œ≥ e‚ÇÄ n t) = Œ≥ ‚ü®t, S.subset t.2‚ü© := by
  induction n with
  | zero => obtain ‚ü®t, ht‚ü© := t ; simp [S.ht0] at ht ; simp [pmap, he‚ÇÄ, ht]
  | succ n ih =>
    have hn' : n ‚àà Finset.range S.n := by simp ; omega
    simp [pmap]
    by_cases h : t ‚â§ S.t n
    ¬∑ rw [concat_left]
      ¬∑ apply ih (by omega)
      ¬∑ rw [partial_map_left hS he‚ÇÄ hn']
        rw [pmap_last hS he‚ÇÄ (by omega)]
      ¬∑ exact h
    ¬∑ have : S.t n ‚â§ t := by simp at h ; exact h.le
      rw [concat_right _ _ this]
      ¬∑ simp only [partial_map, hn']
        simp [partial_map, hS]
        apply Trivialization.lift_proj
        have htI := S.subset t.2
        simpa [icce, projIcc, htI.1, htI.2] using hS n hn' ‚ü®this, t.2.2‚ü©
      ¬∑ rw [partial_map_left hS he‚ÇÄ hn']
        rw [pmap_last hS he‚ÇÄ (by omega)]

@[simp] theorem map_zero (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : S.map Œ≥ e‚ÇÄ 0 = e‚ÇÄ := by
  simpa [firstval, S.ht0] using pmap_first hS he‚ÇÄ le_rfl

@[simp] theorem map_apply (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) (t : I) : p (S.map Œ≥ e‚ÇÄ t) = Œ≥ t := by
  simp [Setup.map, *]

@[simp] theorem map_comp (hS : S.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : p ‚àò (S.map Œ≥ e‚ÇÄ) = Œ≥ := by
  ext t ; simp [*]

theorem congr (hp : IsCoveringMap p) {S' : Setup p} (hS : S.fits Œ≥) (hS' : S'.fits Œ≥) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) :
    S.map Œ≥ e‚ÇÄ = S'.map Œ≥ e‚ÇÄ := by
  apply hp.lift_unique <;> simp [hS, hS', he‚ÇÄ]

end fits

end Setup

theorem Lift (hp : IsCoveringMap p) (he‚ÇÄ : p e‚ÇÄ = Œ≥ 0) : ‚àÉ! Œì : C(I, E), Œì 0 = e‚ÇÄ ‚àß p ‚àò Œì = Œ≥ := by
  obtain ‚ü®S, hS‚ü© := Setup.exist hp Œ≥
  refine ‚ü®S.map Œ≥ e‚ÇÄ, ?_, fun Œì hŒì => ?_‚ü©
  ¬∑ simp [*]
  ¬∑ apply hp.lift_unique <;> simp [hŒì, *]

#print axioms Lift

section HomotopyLift

variable {Y : Type*} [TopologicalSpace Y] {Œ≥ : C(Y, C(I , X))} {Œì‚ÇÄ : C(Y, E)} {y‚ÇÄ y : Y} {t : I}

def fiber (Œ≥ : C(I √ó Y, X)) : C(Y, C(I, X)) := Œ≥.comp prodSwap |>.curry

def square [LocallyCompactSpace Y] (Œ≥ : C(I, C(Y, X))) : C(I √ó Y, X) := Œ≥.uncurry

instance toto : CompactIccSpace I := ‚ü®fun {_ _} => isClosed_Icc.isCompact‚ü©

theorem eventually_fits {S : Setup p} (hS : S.fits (Œ≥ y‚ÇÄ)) : ‚àÄ·∂† y in ùìù y‚ÇÄ, S.fits (Œ≥ y) := by
  let icce01 := @ContinuousMap.icce ‚Ñù _ _ _ 0 1 X _ zero_le_one
  simp only [Setup.fits, eventually_all_finset] at hS ‚ä¢
  peel hS with n hn hS
  have key := ContinuousMap.eventually_mapsTo CompactIccSpace.isCompact_Icc (S.T n).open_baseSet hS
  have h4 := icce01.2.tendsto (Œ≥ y‚ÇÄ) |>.eventually key
  exact Œ≥.2.tendsto y‚ÇÄ |>.eventually h4

variable (hp : IsCoveringMap p)

noncomputable def Lift_at (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E) (y‚ÇÄ : Y) : C(I, E) := by
  exact (Setup.exist hp (Œ≥ y‚ÇÄ)).1.map (Œ≥ y‚ÇÄ) (Œì‚ÇÄ y‚ÇÄ)

noncomputable def Lift_around (Œ≥ : C(Y, C(I , X))) (Œì‚ÇÄ : Y ‚Üí E) (y‚ÇÄ y : Y) :
    C(I, E) := by
  obtain ‚ü®S, -‚ü© := Setup.exist hp (Œ≥ y‚ÇÄ)
  exact S.map (Œ≥ y) (Œì‚ÇÄ y)

theorem Lift_around_eq (Œ≥ : C(Y, C(I , X))) (y‚ÇÄ : Y) :
    Lift_around hp Œ≥ Œì‚ÇÄ y‚ÇÄ y‚ÇÄ = Lift_at hp Œ≥ Œì‚ÇÄ y‚ÇÄ := rfl

variable (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ y 0)
include hŒì‚ÇÄ

@[simp] theorem Lift_at_first : (Lift_at hp Œ≥ Œì‚ÇÄ y‚ÇÄ) 0 = Œì‚ÇÄ y‚ÇÄ :=
  (Setup.exist hp (Œ≥ y‚ÇÄ)).2.map_zero (hŒì‚ÇÄ y‚ÇÄ)

@[simp] theorem Lift_at_apply : p ((Lift_at hp Œ≥ Œì‚ÇÄ y‚ÇÄ) t) = (Œ≥ y‚ÇÄ) t :=
  (Setup.exist hp (Œ≥ y‚ÇÄ)).2.map_apply (hŒì‚ÇÄ y‚ÇÄ) t

@[simp] theorem Lift_at_comp : p ‚àò Lift_at hp Œ≥ Œì‚ÇÄ y = Œ≥ y := by ext t ; simp [hŒì‚ÇÄ]

theorem tendsto_partial_map' {S : Setup p} (hS' : ‚àÄ·∂† (y : Y) in ùìù y‚ÇÄ, S.fits (Œ≥ y)) (n : ‚Ñï)
    (hn : n + 1 ‚â§ S.n) (hn' : n < S.n) : let YY := {y | S.fits (Œ≥ y)}; ‚àÄ (y‚ÇÄ : YY),
    Tendsto (fun y : YY ‚Ü¶ Setup.partial_map' y.2 (Œì‚ÇÄ y) (by simpa using hn')) (ùìù y‚ÇÄ)
      (ùìù (S.partial_map (Œ≥ y‚ÇÄ) (Œì‚ÇÄ y‚ÇÄ) n)) := by
  intro YY y‚ÇÄ
  have h1 : S.fits (Œ≥ y‚ÇÄ) := y‚ÇÄ.2
  simp [Setup.partial_map', Setup.partial_map, hn', y‚ÇÄ.2, h1]
  sorry

theorem continuousAt_pmap {S : Setup p} (hS : S.fits (Œ≥ y‚ÇÄ)) {n : ‚Ñï} (hn : n ‚â§ S.n) :
    ContinuousAt (fun y ‚Ü¶ (S.pmap (Œ≥ y) (Œì‚ÇÄ y) n)) y‚ÇÄ := by
  have hS' := eventually_fits hS
  induction n with
  | zero => exact ContinuousMap.continuous_const'.comp Œì‚ÇÄ.2 |>.continuousAt
  | succ n ih =>
    simp [Setup.pmap]
    change Tendsto _ _ _
    apply tendsto_concat
    ¬∑ filter_upwards [hS'] with y hS'
      rw [hS'.pmap_last (hŒì‚ÇÄ y) (by omega)]
      rw [hS'.partial_map_left (hŒì‚ÇÄ y)]
      simp ; omega
    ¬∑ rw [hS.pmap_last (hŒì‚ÇÄ y‚ÇÄ) (by omega)]
      rw [hS.partial_map_left (hŒì‚ÇÄ y‚ÇÄ)]
      simp ; omega
    ¬∑ apply ih ; omega
    ¬∑ have hn' : n < S.n := by omega
      let YY := {y | S.fits (Œ≥ y)}
      have h1 : ùìù[YY] y‚ÇÄ = ùìù y‚ÇÄ := by simpa using hS'
      have h2 : y‚ÇÄ ‚àà YY := hS
      have h3 : (YY.restrict fun i ‚Ü¶ S.partial_map (Œ≥ i) (Œì‚ÇÄ i) n) =
          fun y : YY => Setup.partial_map' y.2 (Œì‚ÇÄ y) (by simpa using hn') := by
        ext1 ‚ü®y, hy‚ü© ; simp [YY] at hy
        simp [Setup.partial_map, hn', hy]
      rw [‚Üê h1, tendsto_nhdsWithin_iff_subtype h2]
      simp [hn', h3]
      apply tendsto_partial_map' <;> assumption

theorem Lift_around_continuous : ContinuousAt (Lift_around hp Œ≥ Œì‚ÇÄ y‚ÇÄ) y‚ÇÄ := by
  sorry

theorem Lift_around_nhds : Lift_around hp Œ≥ Œì‚ÇÄ y‚ÇÄ =·∂†[ùìù y‚ÇÄ] Lift_at hp Œ≥ Œì‚ÇÄ := by
  filter_upwards [eventually_fits (Setup.exist hp (Œ≥ y‚ÇÄ)).2] with y hS
  apply hp.lift_unique
  ¬∑ simpa [hŒì‚ÇÄ] using hS.map_zero (hŒì‚ÇÄ y)
  ¬∑ simpa [hŒì‚ÇÄ] using hS.map_comp (hŒì‚ÇÄ y)

theorem continuous_LiftAt : Continuous (Lift_at hp Œ≥ Œì‚ÇÄ) := by
  rw [continuous_iff_continuousAt] ; intro y
  apply Lift_around_continuous (y‚ÇÄ := y) hp hŒì‚ÇÄ |>.congr
  exact (Lift_around_nhds hp hŒì‚ÇÄ)

theorem HomotopyLift_backwards (hp : IsCoveringMap p) :
    ‚àÉ! Œì : C(Y, C(I, E)), ‚àÄ y, Œì y 0 = Œì‚ÇÄ y ‚àß p ‚àò (Œì y) = Œ≥ y := by
  refine ‚ü®‚ü®Lift_at hp Œ≥ Œì‚ÇÄ, continuous_LiftAt hp hŒì‚ÇÄ‚ü©, by simp [*], ?_‚ü©
  intro Œì' hŒì' ; ext1 y
  apply hp.lift_unique <;> simp [hp, hŒì‚ÇÄ, hŒì']

end HomotopyLift
