import Mathlib.Topology.ContinuousMap.Interval
import Mathlib.Topology.FiberBundle.Trivialization
import Mathlib.Topology.UnitInterval
import Mathlib.Topology.Covering
import Mathlib.Tactic.Peel
import Mathlib.Topology.CompactOpen

open Set Topology unitInterval Filter ContinuousMap

variable
  {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] {a b c : Œ±}
  {E : Type*} [TopologicalSpace E] {e e‚ÇÄ : E}
  {F : Type*} [TopologicalSpace F]
  {X : Type*} [TopologicalSpace X] {x x‚ÇÄ : X} {p : E ‚Üí X} {Œ≥ : C(I, X)}
  {Z : Type*} [TopologicalSpace Z]

namespace ContinuousMap

def subset {s‚ÇÅ s‚ÇÇ : Set E} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : C(s‚ÇÅ, s‚ÇÇ) := ‚ü®fun x => ‚ü®x.1, h x.2‚ü©, by fun_prop‚ü©

omit [OrderTopology Œ±] in
@[simp] theorem leftval_comp {hab : a ‚â§ b} {Œ≥ : C(Icc a b, E)} {f : C(E, F)} :
    leftval hab (f.comp Œ≥) = f (leftval hab Œ≥) := rfl

omit [OrderTopology Œ±] in
@[simp] theorem rightval_comp {hab : a ‚â§ b} {Œ≥ : C(Icc a b, E)} {f : C(E, F)} :
    rightval hab (f.comp Œ≥) = f (rightval hab Œ≥) := rfl

variable {f : C(Icc a b, E)} {g : C(Icc b c, E)}

variable {Œπ : Type*} {p : Filter Œπ} {F : Œπ ‚Üí C(Icc a b, E)} {G : Œπ ‚Üí C(Icc b c, E)} [CompactIccSpace Œ±]

def restr {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {A : Set Œ±} {B : Set Œ≤} (hS : IsOpen B) :
    C({f : C(A, Œ≤) // range f ‚äÜ B}, C(A, B)) := by
  refine ‚ü®fun Œ≥ => ‚ü®fun t => ‚ü®Œ≥.1 t, Œ≥.2 (mem_range_self t)‚ü©, by fun_prop‚ü©, ?_‚ü©
  refine (continuous_compactOpen.mpr ?_)
  intro K hK U hU
  have h1 := isOpen_setOf_mapsTo hK <| hS.isOpenMap_subtype_val U hU
  convert isOpen_induced h1 ; ext ‚ü®Œ≥, hŒ≥‚ü© ; constructor
  ¬∑ intro h t ht ; simpa using ‚ü®hŒ≥ <| mem_range_self _, h ht‚ü©
  ¬∑ intro h t ht ; obtain ‚ü®‚ü®a, ha‚ü©, b1, rfl‚ü© := h ht ; assumption

end ContinuousMap

namespace Trivialization

variable {T : Trivialization Z p} {a b : ‚Ñù}

abbrev S (T : Trivialization Z p) := T.source √ó T.baseSet
abbrev Œì (T : Trivialization Z p) (a b : ‚Ñù) := C(Icc a b, T.baseSet)

def lift (T : Trivialization Z p) (e : E) (x : X) : E := T.invFun (x, (T e).2)

@[simp] theorem lift_self (hx : p e ‚àà T.baseSet) : T.lift e (p e) = e := by
  simp [lift] ; rw [symm_apply_mk_proj] ; rwa [mem_source]

@[simp] theorem lift_proj (hx : x ‚àà T.baseSet) : p (T.lift e x) = x := by
  simp [lift] ; apply proj_symm_apply ; rwa [mem_target]

def liftCM (T : Trivialization Z p) : C(T.S, T.source) where
  toFun ex := ‚ü®T.lift ex.1 ex.2, T.map_target (by simp [mem_target])‚ü©
  continuous_toFun := by
    apply Continuous.subtype_mk
    refine T.continuousOn_invFun.comp_continuous ?_ (by simp [mem_target])
    apply continuous_prod_mk.mpr ‚ü®by fun_prop, continuous_snd.comp ?_‚ü©
    exact T.continuousOn_toFun.comp_continuous (by fun_prop) (by simp)

def clift (T : Trivialization Z p) : C(T.source √ó T.Œì a b, C(Icc a b, T.source)) := by
  refine ContinuousMap.curry <| T.liftCM.comp <| ‚ü®fun eŒ≥t => ‚ü®eŒ≥t.1.1, eŒ≥t.1.2 eŒ≥t.2‚ü©, ?_‚ü©
  let Œ® : C((T.source √ó T.Œì a b) √ó Icc a b, T.Œì a b √ó Icc a b) :=
    ‚ü®fun eŒ≥t => (eŒ≥t.1.2, eŒ≥t.2), by fun_prop‚ü©
  simpa using ‚ü®by fun_prop, ContinuousMap.continuous_eval.comp Œ®.continuous‚ü©

@[simp] theorem clift_proj {e} {Œ≥ : T.Œì a b} {t} : p (T.clift (e, Œ≥) t) = Œ≥ t := by
  simp [clift, liftCM]

@[simp] theorem clift_left (hab : a ‚â§ b) {e} {Œ≥ : T.Œì a b} {h : p e.1 = Œ≥ ‚ü®a, left_mem_Icc.2 hab‚ü©} :
    T.clift (e, Œ≥) ‚ü®a, left_mem_Icc.2 hab‚ü© = e := by
  ext ; simp [clift, liftCM, ‚Üê h] ; rw [lift_self] ; simp [h]

end Trivialization

namespace IsCoveringMap

theorem eq_of_comp_eq' (hp : IsCoveringMap p) {A : Type*} [TopologicalSpace A] [PreconnectedSpace A]
    {g‚ÇÅ g‚ÇÇ : C(A, E)} (he : p ‚àò g‚ÇÅ = p ‚àò g‚ÇÇ) {a : A} (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ :=
  ContinuousMap.ext (congrFun <| hp.eq_of_comp_eq g‚ÇÅ.continuous_toFun g‚ÇÇ.continuous_toFun he a ha)

theorem lift_unique (hp : IsCoveringMap p) {Œì‚ÇÅ Œì‚ÇÇ : C(I, E)} (h0 : Œì‚ÇÅ 0 = Œì‚ÇÇ 0)
    (h : p ‚àò Œì‚ÇÅ = p ‚àò Œì‚ÇÇ) : Œì‚ÇÅ = Œì‚ÇÇ := by
  exact hp.eq_of_comp_eq' h h0

end IsCoveringMap

structure Setup (p : E ‚Üí X) where
  t : ‚Ñï ‚Üí ‚Ñù
  n : ‚Ñï
  --
  ht : Monotone t
  ht0 : t 0 = 0
  ht1 : ‚àÄ m ‚â• n, t m = 1
  --
  c : ‚Ñï ‚Üí X
  T (i : ‚Ñï) : Trivialization (p ‚Åª¬π' {c i}) p

namespace Setup

variable {S : Setup p} {m n : ‚Ñï}

abbrev icc (S : Setup p) (n : ‚Ñï) : Set ‚Ñù := Icc (S.t n) (S.t (n + 1))

@[simp] theorem htn : S.t S.n = 1 := S.ht1 S.n le_rfl

@[simp] theorem mem_I : S.t n ‚àà I := by
  refine ‚ü®?_, ?_‚ü© <;> simp [‚Üê S.ht0, ‚Üê S.ht1 (n + S.n) (by omega)] <;> apply S.ht <;> omega

@[simp] theorem left_mem : S.t n ‚àà S.icc n := by simp ; apply S.ht ; simp

@[simp] theorem right_mem : S.t (n + 1) ‚àà S.icc n := by simp ; apply S.ht ; simp

@[simp] theorem subset : Icc (S.t m) (S.t n) ‚äÜ I := by
  rintro t ‚ü®ht0, ht1‚ü© ; exact ‚ü®le_trans mem_I.1 ht0, le_trans ht1 mem_I.2‚ü©

attribute [simp] ht0 ht1

def inj (S : Setup p) : C(Icc (S.t m) (S.t n), I) := ‚ü®fun t => ‚ü®t, subset t.2‚ü©, by fun_prop‚ü©

def fits (S : Setup p) (Œ≥ : C(I, X)) : Prop :=
  ‚àÄ n ‚àà Finset.range S.n, MapsTo (IccExtendCM zero_le_one Œ≥) (S.icc n) (S.T n).baseSet

abbrev Liftable (S : Setup p) := {Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß p Œ≥e.2 = Œ≥e.1 0}

def Œ≥n (Œ≥e : S.Liftable) (hn : n ‚àà Finset.range S.n) : (S.T n).Œì (S.t n) (S.t (n + 1)) := by
  refine ‚ü®fun t => ‚ü®Œ≥e.1.1 (S.inj t), ?_‚ü©, ?_‚ü©
  ¬∑ simpa [Setup.subset t.2, Setup.inj] using Œ≥e.2.1 n hn t.2
  ¬∑ fun_prop

noncomputable def exist (hp : IsCoveringMap p) (Œ≥ : C(I, X)) : { S : Setup p // S.fits Œ≥ } := by
  let T (t : I) : Trivialization (p ‚Åª¬π' {Œ≥ t}) p := Classical.choose (hp (Œ≥ t)).2
  let mem_T (t : I) : Œ≥ t ‚àà (T t).baseSet := Classical.choose_spec (hp (Œ≥ t)).2
  let V (t : I) : Set I := Œ≥ ‚Åª¬π' (T t).baseSet
  have h1 t : IsOpen (V t) := (T t).open_baseSet.preimage Œ≥.continuous
  have h2 : univ ‚äÜ ‚ãÉ t, V t := by intro t _ ; rw [mem_iUnion] ; use t ; apply mem_T
  have := exists_monotone_Icc_subset_open_cover_unitInterval h1 h2
  choose t ht0 ht ht1 c hc using this
  choose n ht1 using ht1
  refine ‚ü®‚ü®fun n => t n, n, ht, by simpa using ht0, by simpa using ht1, fun n => Œ≥ (c n),
    fun n => T (c n)‚ü©, ?_‚ü©
  rintro k - s hs
  simpa [subset hs] using hc k hs

theorem fits.eventually {Y : Type*} [TopologicalSpace Y] {y‚ÇÄ : Y} {Œ≥ : C(Y, C(I, X))}
    (hS : S.fits (Œ≥ y‚ÇÄ)) : ‚àÄ·∂† y in ùìù y‚ÇÄ, S.fits (Œ≥ y) := by
  simp only [Setup.fits, eventually_all_finset] at hS ‚ä¢
  peel hS with n hn hS
  have key := ContinuousMap.eventually_mapsTo CompactIccSpace.isCompact_Icc (S.T n).open_baseSet hS
  have h4 := (IccExtendCM zero_le_one).2.tendsto (Œ≥ y‚ÇÄ) |>.eventually key
  exact Œ≥.2.tendsto y‚ÇÄ |>.eventually h4

theorem fits.eventually_nhds (hS : S.fits Œ≥) : ‚àÄ·∂† Œ¥ in ùìù Œ≥, S.fits Œ¥ := by
  let Œì : C(C(I, X), C(I, X)) := ‚ü®fun Œ≥ => Œ≥, by fun_prop‚ü©
  exact hS.eventually (Œ≥ := Œì)

end Setup

section reboot

variable {S : Setup p} {n : ‚Ñï}

def restrict_prop {Œ± Œ≤ : Type*} {p : Œ≤ ‚Üí Prop} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [LocallyCompactPair Œ± Œ≤] : C(Œ±, {b // p b}) ‚âÉ‚Çú {f : C(Œ±, Œ≤) // ‚àÄ a, p (f a)} where
  toFun f := ‚ü®ContinuousMap.comp ‚ü®_, continuous_subtype_val‚ü© f, fun a => (f a).2‚ü©
  invFun := by
    let Œ® : C({f : C(Œ±, Œ≤) // ‚àÄ a, p (f a)} √ó Œ±, C(Œ±, Œ≤) √ó Œ±) := ‚ü®fun fx => ‚ü®fx.1.1, fx.2‚ü©, by fun_prop‚ü©
    let Œõ : C(C(Œ±, Œ≤) √ó Œ±, Œ≤) := ‚ü®fun fx => fx.1 fx.2, continuous_eval‚ü©
    let Œ¶ : C({f : C(Œ±, Œ≤) // ‚àÄ a, p (f a)} √ó Œ±, {b // p b}) :=
    { toFun := fun fx => ‚ü®fx.1.1 fx.2, fx.1.2 fx.2‚ü©
      continuous_toFun := (Œõ.comp Œ®).continuous.subtype_mk _ }
    exact Œ¶.curry.1
  left_inv f := rfl
  right_inv f := by ext ; simp
  continuous_toFun := Continuous.subtype_mk (continuous_comp _) _
  continuous_invFun := ContinuousMap.continuous_toFun _

def restrict_range {Œ± Œ≤ : Type*} {s : Set Œ≤} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [LocallyCompactPair Œ± Œ≤] : C(Œ±, s) ‚âÉ‚Çú {f : C(Œ±, Œ≤) // range f ‚äÜ s} := by
  convert restrict_prop (Œ± := Œ±) (p := fun b => b ‚àà s) <;> exact range_subset_iff

noncomputable def LiftWithin_partialCM (hn : n ‚â§ S.n) :
    {F : C(S.Liftable, C(Icc (S.t 0) (S.t n), E)) // ‚àÄ Œ≥e,
      F Œ≥e ‚ü®S.t 0, left_mem_Icc.mpr (S.ht (by omega))‚ü© = Œ≥e.1.2 ‚àß
      ‚àÄ t, p (F Œ≥e t) = Œ≥e.1.1 (S.inj t)} := by
  induction n with
  | zero =>
    refine ‚ü®?_, ?_‚ü©
    ¬∑ apply ContinuousMap.const'.comp ‚ü®fun ye => ye.1.2, by fun_prop‚ü©
    ¬∑ simp ; rintro Œ≥ e - he t rfl ; exact he
  | succ n ih =>
    specialize ih (by omega)
    have h4 : S.t 0 ‚â§ S.t n := S.ht (by omega)
    have h7 : S.t n ‚â§ S.t (n + 1) := S.ht (by omega)
    refine ‚ü®?_, ?_‚ü©
    ¬∑ have h2 : S.t n ‚àà Icc (S.t 0) (S.t (n + 1)) := by constructor <;> apply S.ht <;> omega
      have h3 : n ‚àà Finset.range S.n := by simp ; omega
      refine (transCM h2).comp ‚ü®?_, ?_‚ü©
      ¬∑ intro Œ≥e
        let left : C(‚Üë(Icc (S.t 0) (S.t n)), E) := ih.1 Œ≥e
        let next : C(S.icc n, E) := by
          have h8 : S.t n ‚àà Icc (S.t 0) (S.t n) := right_mem_Icc.mpr h4
          have h5 : p (ih.1 Œ≥e ‚ü®S.t n, _‚ü©) = Œ≥e.1.1 ‚ü®S.t n, _‚ü© := (ih.2 Œ≥e).2 ‚ü®S.t n, h8‚ü©
          have h6 : S.t n ‚àà S.icc n := Setup.left_mem
          refine .comp ‚ü®_, continuous_subtype_val‚ü© <| (S.T n).clift (‚ü®rightval h4 left, ?_‚ü©, S.Œ≥n Œ≥e h3)
          simpa [rightval, Trivialization.mem_source, h5, Setup.subset h6] using Œ≥e.2.1 n h3 h6
        have : rightval h4 left = leftval h7 next := by
          simp [rightval, leftval, next]
          rw [Trivialization.clift_left h7]
          simp [ih.2] ; rfl
        exact ‚ü®‚ü®left, next‚ü©, this‚ü©
      ¬∑ refine Continuous.subtype_mk (continuous_prod_mk.2 ‚ü®by fun_prop, ?_‚ü©) _
        apply ContinuousMap.continuous_comp _ |>.comp
        apply (S.T n).clift.continuous.comp
        refine continuous_prod_mk.2 ‚ü®?_, ?_‚ü©
        ¬∑ exact (continuous_eval_const _).comp ih.1.continuous |>.subtype_mk _
        ¬∑ let Œ® : C(S.Liftable √ó S.icc n, C(I, X) √ó I) :=
            ‚ü®fun fx => (fx.1.1.1, ‚ü®fx.2.1, Setup.subset fx.2.2‚ü©), by fun_prop‚ü©
          let Œ¶ : C(S.Liftable √ó S.icc n, (S.T n).baseSet) := by
            refine ‚ü®fun fx => ‚ü®fx.1.1.1 ‚ü®fx.2.1, Setup.subset fx.2.2‚ü©, ?_‚ü©, ?_‚ü©
            ¬∑ obtain ‚ü®_, _‚ü© := Setup.subset fx.2.2
              have := fx.1.2.1 n h3 fx.2.2
              rw [IccExtendCM_of_mem] at this ; assumption
            ¬∑ apply Continuous.subtype_mk
              exact ContinuousMap.continuous_eval.comp Œ®.continuous
          exact Œ¶.curry.continuous
    ¬∑ rintro ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© ; dsimp ; constructor
      ¬∑ rw [transCM_left h4] ; exact ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.1
      ¬∑ rintro ‚ü®t, ht‚ü©
        by_cases htn : t ‚â§ S.t n
        ¬∑ rw [transCM_left htn] ; exact ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.2 ‚ü®t, _‚ü©
        ¬∑ rw [transCM_right <| le_of_not_le htn] ; simp ; rfl

noncomputable def LiftWithin_CM :
    {F : C(S.Liftable, C(I, E)) // ‚àÄ Œ≥e, F Œ≥e 0 = Œ≥e.1.2 ‚àß ‚àÄ t, p (F Œ≥e t) = Œ≥e.1.1 t} := by
  obtain ‚ü®F, hF‚ü© := LiftWithin_partialCM (S := S) le_rfl
  let Œ¶ : C(I, Icc (S.t 0) (S.t S.n)) := ‚ü®fun t => ‚ü®t, by simp‚ü©, by fun_prop‚ü©
  refine ‚ü®‚ü®fun Œ≥e => (F Œ≥e).comp Œ¶, by fun_prop‚ü©, fun Œ≥e => ‚ü®?_, fun t => ?_‚ü©‚ü©
  ¬∑ simpa using hF Œ≥e |>.1
  ¬∑ simpa [Setup.inj, Œ¶] using hF Œ≥e |>.2 (Œ¶ t)

theorem Lift (hp : IsCoveringMap p) (he : p e = Œ≥ 0) :
    ‚àÉ! Œì : C(I, E), Œì 0 = e ‚àß p ‚àò Œì = Œ≥ := by
  obtain ‚ü®S, hS‚ü© := Setup.exist hp Œ≥
  obtain ‚ü®F, hF‚ü© := LiftWithin_CM (S := S)
  have h1 : F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© 0 = e := hF ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© |>.1
  have h2 : p ‚àò F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© = Œ≥ := by ext t ; exact hF ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© |>.2 t
  refine ‚ü®F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü©, ‚ü®h1, h2‚ü©, ?_‚ü©
  rintro Œì ‚ü®hŒì‚ÇÅ, hŒì‚ÇÇ‚ü©
  apply hp.lift_unique <;> simp [*]

#print axioms Lift

noncomputable def TheLift (Œ≥ : C(I, X)) (hp : IsCoveringMap p) (he : p e = Œ≥ 0) : C(I, E) :=
  (Lift hp he).exists.choose

@[simp] theorem TheLift_spec (Œ≥ : C(I, X)) (hp : IsCoveringMap p) (he : p e = Œ≥ 0) :
    (TheLift Œ≥ hp he) 0 = e ‚àß p ‚àò (TheLift Œ≥ hp he) = Œ≥ :=
  (Lift hp he).exists.choose_spec

end reboot

section HLift

variable {Y : Type*} [TopologicalSpace Y] {Œ≥ : C(I √ó Y, X)} {Œì‚ÇÄ : C(Y, E)}

def Slice (Œ≥ : C(I √ó Y, X)) : C(Y, C(I, X)) := Œ≥.comp prodSwap |>.curry

noncomputable def JointLift (hp : IsCoveringMap p) (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ (0, y)) :
    C(Y, C(I, E)) := by
  refine ‚ü®fun y => TheLift (Slice Œ≥ y) hp (hŒì‚ÇÄ y), ?_‚ü©
  rw [continuous_iff_continuousAt] ; intro y‚ÇÄ
  obtain ‚ü®S, hS‚ü© := Setup.exist hp (Slice Œ≥ y‚ÇÄ)
  apply ContinuousOn.continuousAt ?_ hS.eventually
  rw [continuousOn_iff_continuous_restrict]
  let G‚ÇÅ : C(S.Liftable, C(I, E)) := LiftWithin_CM |>.1
  let G‚ÇÇ : C({y // S.fits (Slice Œ≥ y)}, S.Liftable) :=
    ‚ü®fun y => ‚ü®‚ü®Slice Œ≥ y, Œì‚ÇÄ y‚ü©, y.2, hŒì‚ÇÄ y‚ü©, by fun_prop‚ü©
  convert G‚ÇÅ.comp G‚ÇÇ |>.continuous
  ext1 y
  have h3 := LiftWithin_CM |>.2 ‚ü®‚ü®Slice Œ≥ y, Œì‚ÇÄ y‚ü©, y.2, hŒì‚ÇÄ y‚ü©
  apply hp.lift_unique
  ¬∑ simp [G‚ÇÅ, G‚ÇÇ, h3, TheLift_spec]
  ¬∑ simp [G‚ÇÅ, G‚ÇÇ, TheLift_spec] ; ext t ; simp [h3]

theorem HLift (hp : IsCoveringMap p) (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ (0, y)) :
    ‚àÉ! Œì : C(I √ó Y, E), ‚àÄ y, Œì (0, y) = Œì‚ÇÄ y ‚àß p ‚àò (Œì ‚ü®¬∑, y‚ü©) = (Œ≥ ‚ü®¬∑, y‚ü©) := by
  refine ‚ü®JointLift hp hŒì‚ÇÄ |>.uncurry |>.comp prodSwap, ?_, ?_‚ü©
  ¬∑ exact fun y => TheLift_spec (Slice Œ≥ y) hp (hŒì‚ÇÄ y)
  ¬∑ rintro Œì hŒì ; ext1 ‚ü®t, y‚ü©
    have h1 : p (Œì‚ÇÄ y) = Slice Œ≥ y 0 := hŒì‚ÇÄ y
    suffices (Œì.comp prodSwap |>.curry y) = (TheLift _ hp h1) from ContinuousMap.congr_fun this t
    apply hp.lift_unique
    ¬∑ simp [TheLift_spec _ hp h1, hŒì]
    ¬∑ simp ; ext t
      have := congr_fun (hŒì y |>.2) t ; simp at this
      simp [this, Slice]

#print axioms HLift

theorem HLift' [LocallyCompactSpace Y] (hp : IsCoveringMap p) {Œ≥ : C(I, C(Y, X))}
    (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ 0 y) :
    ‚àÉ! Œì : C(I, C(Y, E)), ‚àÄ y, Œì 0 y = Œì‚ÇÄ y ‚àß p ‚àò (Œì ¬∑ y) = (Œ≥ ¬∑ y) := by
  obtain ‚ü®Œì, h1, h2‚ü© := HLift hp hŒì‚ÇÄ (Œ≥ := Œ≥.uncurry)
  refine ‚ü®Œì.curry, h1, fun Œì' h3 => ?_‚ü©
  simp [‚Üê h2 Œì'.uncurry h3] ; rfl

end HLift
