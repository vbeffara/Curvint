import Mathlib

open Set Topology Metric unitInterval Filter ContinuousMap

variable
  {Œ± : Type*} [LinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] {a b c : Œ±}
  {E : Type*} [TopologicalSpace E] {e e‚ÇÄ : E}
  {F : Type*} [TopologicalSpace F]
  {X : Type*} [TopologicalSpace X] {x x‚ÇÄ : X} {p : E ‚Üí X} {Œ≥ : C(I, X)}
  {Z : Type*} [TopologicalSpace Z]

namespace ContinuousMap

def subset {s‚ÇÅ s‚ÇÇ : Set E} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : C(s‚ÇÅ, s‚ÇÇ) := ‚ü®fun x => ‚ü®x.1, h x.2‚ü©, by fun_prop‚ü©

def subset_left (h : b ‚àà Icc a c) : C(Icc a b, Icc a c) := subset (Icc_subset_Icc le_rfl h.2)

def subset_right (h : b ‚àà Icc a c) : C(Icc b c, Icc a c) := subset (Icc_subset_Icc h.1 le_rfl)

def firstval (hab : a ‚â§ b) : C(C(Icc a b, E), E) := ‚ü®fun f => f ‚ü®a, le_rfl, hab‚ü©, by continuity‚ü©

omit [OrderTopology Œ±] in
@[simp] theorem firstval_comp {hab : a ‚â§ b} {Œ≥ : C(Icc a b, E)} {f : C(E, F)} :
    firstval hab (f.comp Œ≥) = f (firstval hab Œ≥) := rfl

def lastval (hab : a ‚â§ b) : C(C(Icc a b, E), E) := ‚ü®fun f => f ‚ü®b, hab, le_rfl‚ü©, by continuity‚ü©

def icce (hab : a ‚â§ b) : C(C(Icc a b, E), C(Œ±, E)) where
  toFun f := f.comp ‚ü®projIcc a b hab, continuous_projIcc‚ü©
  continuous_toFun := continuous_comp_left _

-- TODO use everywhere, suppress `projIcc`
@[simp] theorem icce_of_mem {hab : a ‚â§ b} {f : C(Icc a b, E)} {x : Œ±} (hx : x ‚àà Icc a b) :
    icce hab f x = f ‚ü®x, hx‚ü© := by
  simp [icce, projIcc, hx.1, hx.2]

noncomputable def concat (h : b ‚àà Icc a c) (f : C(Icc a b, E)) (g : C(Icc b c, E)) : C(Icc a c, E) := by
  by_cases hb : lastval h.1 f = firstval h.2 g
  ¬∑ let h (t : Œ±) : E := if t ‚â§ b then icce h.1 f t else icce h.2 g t
    suffices Continuous h from ‚ü®fun t => h t, by fun_prop‚ü©
    apply Continuous.if_le (by fun_prop) (by fun_prop) continuous_id continuous_const
    rintro x rfl ; simpa [icce]
  ¬∑ exact .const _ (firstval h.1 f) -- junk value

variable {f : C(Icc a b, E)} {g : C(Icc b c, E)}

theorem concat_comp_left (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g) :
    f = (concat h f g).comp (subset_left h) := by
  ext x ; simp [concat, icce, hb, subset_left, subset, x.2.2]

theorem concat_comp_right (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g) :
    g = (concat h f g).comp (subset_right h) := by
  ext x ; by_cases hxb : x = b
  ¬∑ simp [concat, hb, subset_right, subset, hxb]
    simp [lastval, firstval] at hb ; simp [icce, hb] ; simp [‚Üê hxb]
  ¬∑ have := lt_of_le_of_ne x.2.1 (Ne.symm hxb) |>.not_le
    simp [concat, hb, subset_right, subset, x.2.2, this, icce]

@[simp] theorem concat_left (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g)
    {t : Icc a c} (ht : t ‚â§ b) : concat h f g t = f ‚ü®t, t.2.1, ht‚ü© := by
  nth_rewrite 2 [concat_comp_left h hb] ; rfl

@[simp] theorem concat_right (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g)
    {t : Icc a c} (ht : b ‚â§ t) : concat h f g t = g ‚ü®t, ht, t.2.2‚ü© := by
  nth_rewrite 2 [concat_comp_right h hb] ; rfl

theorem concat_forall (h : b ‚àà Icc a c) (hb : lastval h.1 f = firstval h.2 g) (pred : Œ± ‚Üí E ‚Üí Prop)
    (h1 : ‚àÄ t : Icc a b, pred t (f t)) (h2 : ‚àÄ t : Icc b c, pred t (g t)) (t : Icc a c) :
    pred t (concat h f g t) := by
  by_cases ht : t ‚â§ b
  ¬∑ simp [ht, hb] ; convert h1 _ using 1 ; rfl
  ¬∑ simp [le_of_not_le ht, hb] ; convert h2 _ using 1 ; rfl

variable {Œπ : Type*} {p : Filter Œπ} {F : Œπ ‚Üí C(Icc a b, E)} {G : Œπ ‚Üí C(Icc b c, E)} [CompactIccSpace Œ±]

theorem tendsto_concat (h : b ‚àà Icc a c) (hfg : ‚àÄ·∂† i in p, lastval h.1 (F i) = firstval h.2 (G i))
    (hfg' : lastval h.1 f = firstval h.2 g) (hf : Tendsto F p (ùìù f)) (hg : Tendsto G p (ùìù g)) :
    Tendsto (fun i => concat h (F i) (G i)) p (ùìù (concat h f g)) := by
  rw [tendsto_nhds_compactOpen] at hf hg ‚ä¢
  rintro K hK U hU hfgU
  let K‚ÇÅ : Set (Icc a b) := subset_left h ‚Åª¬π' K
  let K‚ÇÇ : Set (Icc b c) := subset_right h ‚Åª¬π' K
  have hK‚ÇÅ : IsCompact K‚ÇÅ := hK.preimage_continuous (subset_left h).2
  have hK‚ÇÇ : IsCompact K‚ÇÇ := hK.preimage_continuous (subset_right h).2
  have hfU : MapsTo f K‚ÇÅ U := by rw [concat_comp_left h hfg'] ; exact hfgU.comp (mapsTo_preimage _ _)
  have hgU : MapsTo g K‚ÇÇ U := by rw [concat_comp_right h hfg'] ; exact hfgU.comp (mapsTo_preimage _ _)
  filter_upwards [hf K‚ÇÅ hK‚ÇÅ U hU hfU, hg K‚ÇÇ hK‚ÇÇ U hU hgU, hfg] with i hf hg hfg x hx
  by_cases hx' : x ‚â§ b
  ¬∑ simpa [concat_left h hfg hx'] using hf hx
  ¬∑ simpa [concat_right h hfg (lt_of_not_le hx' |>.le)] using hg hx

noncomputable def concatCM (h : b ‚àà Icc a c) :
    C({f : C(Icc a b, E) √ó C(Icc b c, E) // lastval h.1 f.1 = firstval h.2 f.2}, C(Icc a c, E)) := by
  refine ‚ü®fun fg => concat h fg.1.1 fg.1.2, ?_‚ü©
  let Œ¶ : C(Icc a b, E) √ó C(Icc b c, E) ‚Üí C(Icc a c, E) := (concat h).uncurry
  let S : Set (C(Icc a b, E) √ó C(Icc b c, E)) := {f | lastval h.1 f.1 = firstval h.2 f.2}
  change Continuous (S.restrict Œ¶)
  refine continuousOn_iff_continuous_restrict.mp (fun fg hfg => ?_)
  refine tendsto_concat h ?_ hfg ?_ ?_
  ¬∑ apply eventually_nhdsWithin_of_forall ; intro f hf ; exact hf
  ¬∑ exact tendsto_nhdsWithin_of_tendsto_nhds continuousAt_fst
  ¬∑ exact tendsto_nhdsWithin_of_tendsto_nhds continuousAt_snd

def restr {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤] {A : Set Œ±} {B : Set Œ≤} (hS : IsOpen B) :
    C({f : C(A, Œ≤) // range f ‚äÜ B}, C(A, B)) := by
  refine ‚ü®fun Œ≥ => ‚ü®fun t => ‚ü®Œ≥.1 t, Œ≥.2 (mem_range_self t)‚ü©, by fun_prop‚ü©, ?_‚ü©
  refine (continuous_compactOpen.mpr ?_)
  intro K hK U hU
  have h1 := isOpen_setOf_mapsTo hK <| hS.isOpenMap_subtype_val U hU
  convert isOpen_induced h1 ; ext ‚ü®Œ≥, hŒ≥‚ü© ; constructor
  ¬∑ intro h t ht ; simpa using ‚ü®hŒ≥ <| mem_range_self _, h ht‚ü©
  ¬∑ intro h t ht ; obtain ‚ü®‚ü®a, ha‚ü©, b1, rfl‚ü© := h ht ; assumption

end ContinuousMap


namespace Trivialization

variable {T : Trivialization Z p} {a b : ‚Ñù}

abbrev S (T : Trivialization Z p) := T.source √ó T.baseSet
abbrev Œì (T : Trivialization Z p) (a b : ‚Ñù) := {Œ≥ : C(Icc a b, X) // range Œ≥ ‚äÜ T.baseSet}
abbrev Œì' (T : Trivialization Z p) (a b : ‚Ñù) := C(Icc a b, T.baseSet)

def lift (T : Trivialization Z p) (e : E) (x : X) : E := T.invFun (x, (T e).2)

@[simp] theorem lift_self (hx : p e ‚àà T.baseSet) : T.lift e (p e) = e := by
  simp [lift] ; rw [symm_apply_mk_proj] ; rwa [mem_source]

@[simp] theorem lift_proj (hx : x ‚àà T.baseSet) : p (T.lift e x) = x := by
  simp [lift] ; apply proj_symm_apply ; rwa [mem_target]

def liftCM (T : Trivialization Z p) : C(T.S, T.source) where
  toFun ex := ‚ü®T.lift ex.1 ex.2, T.map_target (by simp [mem_target])‚ü©
  continuous_toFun := by
    apply Continuous.subtype_mk
    refine T.continuousOn_invFun.comp_continuous ?_ (by simp [mem_target])
    apply continuous_prod_mk.mpr ‚ü®by fun_prop, continuous_snd.comp ?_‚ü©
    exact T.continuousOn_toFun.comp_continuous (by fun_prop) (by simp)

def clift (T : Trivialization Z p) : C(T.source √ó T.Œì' a b, C(Icc a b, T.source)) := by
  refine ContinuousMap.curry ‚ü®fun eŒ≥t => T.liftCM ‚ü®eŒ≥t.1.1, eŒ≥t.1.2 eŒ≥t.2‚ü©, ?_‚ü©
  let Œ® := fun eŒ≥t : (‚ÜëT.source √ó T.Œì' a b) √ó ‚Üë(Icc a b) => (eŒ≥t.1.2, eŒ≥t.2)
  have Œ®c : Continuous Œ® := by fun_prop
  apply T.liftCM.2.comp
  simpa using ‚ü®by fun_prop, ContinuousMap.continuous_eval.comp Œ®c‚ü©

@[simp] theorem clift_proj {e} {Œ≥ : T.Œì' a b} {t} : p (T.clift (e, Œ≥) t) = Œ≥ t := by
  simp [clift, liftCM]

@[simp] theorem clift_left (hab : a ‚â§ b) {e} {Œ≥ : T.Œì' a b} {h : p e.1 = Œ≥ ‚ü®a, left_mem_Icc.2 hab‚ü©} :
    T.clift (e, Œ≥) ‚ü®a, left_mem_Icc.2 hab‚ü© = e := by
  ext ; simp [clift, liftCM, ‚Üê h] ; rw [lift_self] ; simp [h]

end Trivialization

namespace IsCoveringMap

theorem eq_of_comp_eq' (hp : IsCoveringMap p) {A : Type*} [TopologicalSpace A] [PreconnectedSpace A]
    {g‚ÇÅ g‚ÇÇ : C(A, E)} (he : p ‚àò g‚ÇÅ = p ‚àò g‚ÇÇ) {a : A} (ha : g‚ÇÅ a = g‚ÇÇ a) : g‚ÇÅ = g‚ÇÇ :=
  ContinuousMap.ext (congrFun <| hp.eq_of_comp_eq g‚ÇÅ.continuous_toFun g‚ÇÇ.continuous_toFun he a ha)

theorem lift_unique (hp : IsCoveringMap p) {Œì‚ÇÅ Œì‚ÇÇ : C(I, E)} (h0 : Œì‚ÇÅ 0 = Œì‚ÇÇ 0)
    (h : p ‚àò Œì‚ÇÅ = p ‚àò Œì‚ÇÇ) : Œì‚ÇÅ = Œì‚ÇÇ := by
  exact hp.eq_of_comp_eq' h h0

end IsCoveringMap

structure Setup (p : E ‚Üí X) where
  t : ‚Ñï ‚Üí ‚Ñù
  n : ‚Ñï
  --
  ht : Monotone t
  ht0 : t 0 = 0
  ht1 : ‚àÄ m ‚â• n, t m = 1
  --
  c : ‚Ñï ‚Üí X
  T (i : ‚Ñï) : Trivialization (p ‚Åª¬π' {c i}) p

namespace Setup

variable {S : Setup p} {m n : ‚Ñï}

@[simp] theorem htn : S.t S.n = 1 := S.ht1 S.n le_rfl

@[simp] theorem mem_I : S.t n ‚àà I := by
  refine ‚ü®?_, ?_‚ü© <;> simp [‚Üê S.ht0, ‚Üê S.ht1 (n + S.n) (by omega)] <;> apply S.ht <;> omega

@[simp] theorem left_mem : S.t n ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

@[simp] theorem right_mem : S.t (n + 1) ‚àà Icc (S.t n) (S.t (n + 1)) := by simp ; apply S.ht ; simp

@[simp] theorem subset : Icc (S.t m) (S.t n) ‚äÜ I := by
  rintro t ‚ü®ht0, ht1‚ü© ; exact ‚ü®le_trans mem_I.1 ht0, le_trans ht1 mem_I.2‚ü©

attribute [simp] ht0 ht1

def inj (S : Setup p) : C(Icc (S.t m) (S.t n), I) := ‚ü®fun t => ‚ü®t, subset t.2‚ü©, by fun_prop‚ü©

def fits (S : Setup p) (Œ≥ : C(I, X)) : Prop :=
  ‚àÄ n ‚àà Finset.range S.n, MapsTo (icce zero_le_one Œ≥) (Icc (S.t n) (S.t (n + 1))) (S.T n).baseSet

noncomputable def exist (hp : IsCoveringMap p) (Œ≥ : C(I, X)) : { S : Setup p // S.fits Œ≥ } := by
  let T (t : I) : Trivialization (p ‚Åª¬π' {Œ≥ t}) p := Classical.choose (hp (Œ≥ t)).2
  let mem_T (t : I) : Œ≥ t ‚àà (T t).baseSet := Classical.choose_spec (hp (Œ≥ t)).2
  let V (t : I) : Set I := Œ≥ ‚Åª¬π' (T t).baseSet
  have h1 t : IsOpen (V t) := (T t).open_baseSet.preimage Œ≥.continuous
  have h2 : univ ‚äÜ ‚ãÉ t, V t := by intro t _ ; rw [mem_iUnion] ; use t ; apply mem_T
  have := exists_monotone_Icc_subset_open_cover_unitInterval h1 h2
  choose t ht0 ht ht1 c hc using this
  choose n ht1 using ht1
  refine ‚ü®‚ü®fun n => t n, n, ht, by simpa using ht0, by simpa using ht1, fun n => Œ≥ (c n), fun n => T (c n)‚ü©, ?_‚ü©
  rintro k - s hs
  simpa [icce, projIcc, (t k).2.1 |>.trans hs.1, hs.2.trans (t (k + 1)).2.2] using hc k hs

theorem fits.eventually {Y : Type*} [TopologicalSpace Y] {y‚ÇÄ : Y} {Œ≥ : C(Y, C(I, X))}
    (hS : S.fits (Œ≥ y‚ÇÄ)) : ‚àÄ·∂† y in ùìù y‚ÇÄ, S.fits (Œ≥ y) := by
  let icce01 := @ContinuousMap.icce ‚Ñù _ _ _ 0 1 X _ zero_le_one
  simp only [Setup.fits, eventually_all_finset] at hS ‚ä¢
  peel hS with n hn hS
  have key := ContinuousMap.eventually_mapsTo CompactIccSpace.isCompact_Icc (S.T n).open_baseSet hS
  have h4 := icce01.2.tendsto (Œ≥ y‚ÇÄ) |>.eventually key
  exact Œ≥.2.tendsto y‚ÇÄ |>.eventually h4

end Setup

section reboot

variable {S : Setup p} {n : ‚Ñï}

def restrict_prop {Œ± Œ≤ : Type*} {p : Œ≤ ‚Üí Prop} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [LocallyCompactPair Œ± Œ≤] : C(Œ±, {b // p b}) ‚âÉ‚Çú {f : C(Œ±, Œ≤) // ‚àÄ a, p (f a)} where
  toFun f := ‚ü®ContinuousMap.comp ‚ü®_, continuous_subtype_val‚ü© f, fun a => (f a).2‚ü©
  invFun := by
    let Œ® : C({f : C(Œ±, Œ≤) // ‚àÄ a, p (f a)} √ó Œ±, C(Œ±, Œ≤) √ó Œ±) := ‚ü®fun fx => ‚ü®fx.1.1, fx.2‚ü©, by fun_prop‚ü©
    let Œõ : C(C(Œ±, Œ≤) √ó Œ±, Œ≤) := ‚ü®fun fx => fx.1 fx.2, continuous_eval‚ü©
    let Œ¶ : C({f : C(Œ±, Œ≤) // ‚àÄ a, p (f a)} √ó Œ±, {b // p b}) :=
    { toFun := fun fx => ‚ü®fx.1.1 fx.2, fx.1.2 fx.2‚ü©
      continuous_toFun := (Œõ.comp Œ®).continuous.subtype_mk _ }
    exact Œ¶.curry.1
  left_inv f := rfl
  right_inv f := by ext ; simp
  continuous_toFun := Continuous.subtype_mk (continuous_comp _) _
  continuous_invFun := ContinuousMap.continuous_toFun _

def restrict_range {Œ± Œ≤ : Type*} {s : Set Œ≤} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [LocallyCompactPair Œ± Œ≤] : C(Œ±, s) ‚âÉ‚Çú {f : C(Œ±, Œ≤) // range f ‚äÜ s} := by
  convert restrict_prop (Œ± := Œ±) (p := fun b => b ‚àà s) <;> exact range_subset_iff

noncomputable def LiftWithin_partialCM (hn : n ‚â§ S.n) :
    {F : C({Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß p Œ≥e.2 = Œ≥e.1 0}, C(Icc (S.t 0) (S.t n), E)) // ‚àÄ Œ≥e,
      F Œ≥e ‚ü®S.t 0, left_mem_Icc.mpr (S.ht (by omega))‚ü© = Œ≥e.1.2 ‚àß
      ‚àÄ t, p (F Œ≥e t) = Œ≥e.1.1 (S.inj t)} := by
  induction n with
  | zero =>
    refine ‚ü®?_, ?_‚ü©
    ¬∑ apply ContinuousMap.const'.comp
      exact ContinuousMap.comp ‚ü®Prod.snd, continuous_snd‚ü© ‚ü®Subtype.val, continuous_subtype_val‚ü©
    ¬∑ rintro ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü©
      refine ‚ü®rfl, ?_‚ü©
      rintro ‚ü®t, ht‚ü©
      simp at ht ; simpa [Setup.inj, ht] using he
  | succ n ih =>
    have h2 : S.t n ‚àà Icc (S.t 0) (S.t (n + 1)) := by constructor <;> apply S.ht <;> omega
    have h3 : n ‚àà Finset.range S.n := by simp ; omega
    have h4 : S.t 0 ‚â§ S.t n := S.ht (by omega)
    have h6 : S.t n ‚àà Icc (S.t n) (S.t (n + 1)) := Setup.left_mem
    have h7 : S.t n ‚â§ S.t (n + 1) := S.ht (by omega)
    have h8 : S.t n ‚àà Icc (S.t 0) (S.t n) := by constructor <;> apply S.ht <;> omega
    specialize ih (by omega)
    refine ‚ü®?_, ?_‚ü©
    ¬∑ apply (concatCM h2).comp
      refine ‚ü®?_, ?_‚ü©
      ¬∑ rintro Œ≥e
        obtain ‚ü®F, hF‚ü© := ih
        let h5 := hF Œ≥e
        set Œ¥ := F Œ≥e
        refine ‚ü®‚ü®Œ¥, ?_‚ü©, ?_‚ü©
        ¬∑ let Œ≥n : (S.T n).Œì' (S.t n) (S.t (n + 1)) := by
            refine ‚ü®fun t => ‚ü®Œ≥e.1.1 (S.inj t), ?_‚ü©, ?_‚ü©
            ¬∑ simpa [Setup.subset t.2, Setup.inj] using Œ≥e.2.1 n h3 t.2
            ¬∑ fun_prop
          let next : C(Icc (S.t n) (S.t (n + 1)), (S.T n).source) := by
            refine (S.T n).clift (‚ü®lastval h4 Œ¥, ?_‚ü©, Œ≥n)
            let h'5 := h5.2 ‚ü®S.t n, h8‚ü© ; simp [Setup.inj] at h'5
            simpa [lastval, Trivialization.mem_source, h'5, Setup.subset h6] using Œ≥e.2.1 n h3 h6
          let next' : C(Icc (S.t n) (S.t (n + 1)), E) := by
            refine ContinuousMap.comp ‚ü®Subtype.val, by fun_prop‚ü© next
          exact next'
        ¬∑ simp [lastval, firstval]
          rw [Trivialization.clift_left h7]
          simp [Œ¥, hF] ; rfl
      ¬∑ simp
        apply Continuous.subtype_mk
        simp ; refine ‚ü®by fun_prop, ?_‚ü©
        apply ContinuousMap.continuous_comp _ |>.comp
        apply (S.T n).clift.continuous.comp
        simp ; constructor
        ¬∑ fun_prop
        ¬∑ simp [Setup.inj]
          let Œ¶ : {Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß p Œ≥e.2 = Œ≥e.1 0} √ó (Icc (S.t n) (S.t (n + 1))) ‚Üí
              { x // x ‚àà (S.T n).baseSet } := by
            intro fx
            refine ‚ü®fx.1.1.1 ‚ü®fx.2.1, Setup.subset fx.2.2‚ü©, by {
              obtain ‚ü®_, _‚ü© := Setup.subset fx.2.2
              simpa [icce, projIcc, *] using fx.1.2.1 n h3 fx.2.2
            }‚ü©
          have Œ¶c : Continuous Œ¶ := by
            simp [Œ¶]
            apply Continuous.subtype_mk
            let Œ® : {Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß p Œ≥e.2 = Œ≥e.1 0} √ó (Icc (S.t n) (S.t (n + 1))) ‚Üí
              C(I, X) √ó I := fun fx => (fx.1.1.1, ‚ü®fx.2.1, Setup.subset fx.2.2‚ü©)
            have Œ®c : Continuous Œ® := by fun_prop
            exact ContinuousMap.continuous_eval.comp Œ®c
          have := ContinuousMap.curry ‚ü®Œ¶, Œ¶c‚ü© |>.continuous
          exact this
    ¬∑ rintro ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü©
      refine ‚ü®?_, ?_‚ü©
      ¬∑ simp [concatCM, -Setup.ht0]
        rw [concat_left]
        ¬∑ simpa using ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.1
        ¬∑ -- TODO multiple
          simp [lastval, firstval]
          rw [Trivialization.clift_left h7]
          simpa using ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.2 ‚ü®S.t n, h8‚ü©
        ¬∑ exact S.ht (by omega)
      ¬∑ rintro ‚ü®t, ht‚ü© ; dsimp at hŒ≥ he
        simp [concatCM]
        by_cases htn : t ‚â§ S.t n
        ¬∑ rw [concat_left]
          ¬∑ refine ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.2 ‚ü®t, _‚ü©
          ¬∑ simp [lastval, firstval]
            rw [Trivialization.clift_left h7]
            simpa using ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.2 ‚ü®S.t n, h8‚ü©
          ¬∑ exact htn
        ¬∑ rw [concat_right]
          ¬∑ simp ; rfl
          ¬∑ simp [lastval, firstval]
            rw [Trivialization.clift_left h7]
            simpa using ih.2 ‚ü®‚ü®Œ≥, e‚ü©, hŒ≥, he‚ü© |>.2 ‚ü®S.t n, h8‚ü©
          ¬∑ exact le_of_not_le htn

#print axioms LiftWithin_partialCM

noncomputable def LiftWithin_CM :
    {F : C({Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß p Œ≥e.2 = Œ≥e.1 0}, C(I, E)) //
      ‚àÄ Œ≥e, F Œ≥e 0 = Œ≥e.1.2 ‚àß ‚àÄ t, p (F Œ≥e t) = Œ≥e.1.1 t} := by
  obtain ‚ü®F, hF‚ü© := LiftWithin_partialCM (S := S) le_rfl
  let Œ¶ : C(I, Icc (S.t 0) (S.t S.n)) := ‚ü®fun t => ‚ü®t, by simp‚ü©, by fun_prop‚ü©
  refine ‚ü®‚ü®fun Œ≥e => (F Œ≥e).comp Œ¶, by fun_prop‚ü©, fun Œ≥e => ‚ü®?_, fun t => ?_‚ü©‚ü©
  ¬∑ simpa using hF Œ≥e |>.1
  ¬∑ simpa [Setup.inj, Œ¶] using hF Œ≥e |>.2 (Œ¶ t)

theorem Lift (hp : IsCoveringMap p) (he : p e = Œ≥ 0) :
    ‚àÉ! Œì : C(I, E), Œì 0 = e ‚àß p ‚àò Œì = Œ≥ := by
  obtain ‚ü®S, hS‚ü© := Setup.exist hp Œ≥
  obtain ‚ü®F, hF‚ü© := LiftWithin_CM (S := S)
  have h1 : F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© 0 = e := hF ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© |>.1
  have h2 : p ‚àò F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© = Œ≥ := by ext t ; exact hF ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü© |>.2 t
  refine ‚ü®F ‚ü®‚ü®Œ≥, e‚ü©, hS, he‚ü©, ‚ü®h1, h2‚ü©, ?_‚ü©
  rintro Œì ‚ü®hŒì‚ÇÅ, hŒì‚ÇÇ‚ü©
  apply hp.lift_unique <;> simp [*]

#print axioms Lift

noncomputable def TheLift (Œ≥ : C(I, X)) (hp : IsCoveringMap p) (he : p e = Œ≥ 0) : C(I, E) :=
  (Lift hp he).exists.choose

@[simp] theorem TheLift_spec (Œ≥ : C(I, X)) (hp : IsCoveringMap p) (he : p e = Œ≥ 0) :
    (TheLift Œ≥ hp he) 0 = e ‚àß p ‚àò (TheLift Œ≥ hp he) = Œ≥ :=
  (Lift hp he).exists.choose_spec

end reboot

section HLift

variable {Y : Type*} [TopologicalSpace Y] {Œ≥ : C(I √ó Y, X)} {Œì‚ÇÄ : C(Y, E)}

def Slice (Œ≥ : C(I √ó Y, X)) : C(Y, C(I, X)) := Œ≥.comp prodSwap |>.curry

noncomputable def JointLift (hp : IsCoveringMap p) (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ (0, y)) :
    C(Y, C(I, E)) := by
  let F y := TheLift (Slice Œ≥ y) hp (hŒì‚ÇÄ y)
  refine ‚ü®F, ?_‚ü©
  rw [continuous_iff_continuousAt] ; intro y‚ÇÄ
  obtain ‚ü®S, hS‚ü© := Setup.exist hp (Slice Œ≥ y‚ÇÄ)
  let s‚ÇÅ : Set Y := {y | S.fits (Slice Œ≥ y)}
  have h1 : s‚ÇÅ ‚àà ùìù y‚ÇÄ := hS.eventually
  suffices ContinuousOn F s‚ÇÅ from this.continuousAt h1
  rw [continuousOn_iff_continuous_restrict]
  let G‚ÇÅ := LiftWithin_CM (S := S) |>.1
  let G‚ÇÇ : C(s‚ÇÅ, {Œ≥e : C(I, X) √ó E // S.fits Œ≥e.1 ‚àß p Œ≥e.2 = Œ≥e.1 0}) :=
    ‚ü®fun y => ‚ü®‚ü®Slice Œ≥ y, Œì‚ÇÄ y‚ü©, y.2, hŒì‚ÇÄ y‚ü©, by fun_prop‚ü©
  let G := G‚ÇÅ.comp G‚ÇÇ
  convert G.continuous
  ext1 y
  have h2 := TheLift_spec (Slice Œ≥ y) hp (hŒì‚ÇÄ y)
  have h3 := LiftWithin_CM (S := S) |>.2 ‚ü®‚ü®Slice Œ≥ y, Œì‚ÇÄ y‚ü©, y.2, hŒì‚ÇÄ y‚ü©
  apply hp.lift_unique
  ¬∑ simp [F, h2, G, G‚ÇÅ, G‚ÇÇ, h3]
  ¬∑ simp [F, h2, G, G‚ÇÅ, G‚ÇÇ] ; ext t ; simp [h3]

theorem HLift (hp : IsCoveringMap p) (hŒì‚ÇÄ : ‚àÄ y, p (Œì‚ÇÄ y) = Œ≥ (0, y)) :
    ‚àÉ! Œì : C(I √ó Y, E), ‚àÄ y, Œì (0, y) = Œì‚ÇÄ y ‚àß p ‚àò (Œì ‚ü®¬∑, y‚ü©) = (Œ≥ ‚ü®¬∑, y‚ü©) := by
  refine ‚ü®JointLift hp hŒì‚ÇÄ |>.uncurry |>.comp prodSwap, ?_, ?_‚ü©
  ¬∑ exact fun y => TheLift_spec (Slice Œ≥ y) hp (hŒì‚ÇÄ y)
  ¬∑ rintro Œì hŒì ; ext1 ‚ü®t, y‚ü©
    have h1 : p (Œì‚ÇÄ y) = Slice Œ≥ y 0 := hŒì‚ÇÄ y
    suffices (Œì.comp prodSwap |>.curry y) = (TheLift _ hp h1) from ContinuousMap.congr_fun this t
    apply hp.lift_unique
    ¬∑ simp [TheLift_spec _ hp h1, hŒì]
    ¬∑ simp ; ext t
      have := congr_fun (hŒì y |>.2) t ; simp at this
      simp [this, Slice]

#print axioms HLift

end HLift
